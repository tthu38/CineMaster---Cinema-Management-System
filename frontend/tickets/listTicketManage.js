import { API_BASE_URL, getValidToken, handleResponse } from "../js/api.js";

const ticketBody = document.getElementById("ticketBody");
const statusFilter = document.getElementById("statusFilter");
const searchBox = document.getElementById("searchBox");
const refreshBtn = document.getElementById("refreshBtn");

let allTickets = [];

/* ============================================================
   üîπ 1Ô∏è‚É£ T·∫£i danh s√°ch v√© + t·ª± ƒë·ªông b·ªï sung th√¥ng tin c√≤n thi·∫øu
   ============================================================ */
async function loadTickets() {
    try {
        const token = getValidToken();
        const branchId = localStorage.getItem("branchId");

        const res = await fetch(`${API_BASE_URL}/tickets/branch/${branchId}`, {
            headers: { "Authorization": `Bearer ${token}` }
        });
        let data = await handleResponse(res);
        data = data.data || data.result || data;

        // üü¶ N·∫øu v√© thi·∫øu th√¥ng tin, t·ª± ƒë·ªông g·ªçi th√™m API chi ti·∫øt
        const enriched = await Promise.all(data.map(async (t) => {
            if (!t.movieTitle || !t.showtimeStart || !t.seatNumbers) {
                try {
                    const resDetail = await fetch(`${API_BASE_URL}/tickets/${t.ticketId}`, {
                        headers: { "Authorization": `Bearer ${token}` }
                    });
                    const detail = await handleResponse(resDetail);
                    return { ...t, ...detail };
                } catch (err) {
                    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt v√©:", t.ticketId, err);
                    return t;
                }
            }
            return t;
        }));

        allTickets = enriched;
        renderTickets(allTickets);
    } catch (err) {
        console.error("‚ùå L·ªói t·∫£i v√©:", err);
        ticketBody.innerHTML = `<tr><td colspan="9" class="text-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch v√©.</td></tr>`;
    }
}

/* ============================================================
   üîπ 2Ô∏è‚É£ Hi·ªÉn th·ªã danh s√°ch v√© trong b·∫£ng
   ============================================================ */

function renderTickets(data) {
    if (!data || data.length === 0) {
        ticketBody.innerHTML = `<tr><td colspan="9" class="text-muted">Kh√¥ng c√≥ v√© n√†o.</td></tr>`;
        return;
    }

    ticketBody.innerHTML = data.map((t, i) => {
        // üé¨ Phim
        const movieTitle = t.movieTitle || "Kh√¥ng r√µ";

        // üïí Su·∫•t chi·∫øu
        const showtime = t.startTime || t.showtimeStart || "-";

        // üè¢ R·∫°p
        const branchName = t.branchName || "-";

        // üí∫ Gh·∫ø
        const seatNums = t.seatNames || "-";

        // üë§ Kh√°ch h√†ng
        // üë§ Kh√°ch h√†ng
        const customer = t.account?.fullName || t.account?.username || t.customerName || t.customer?.fullName || "Kh√°ch v√£ng lai";

        return `
        <tr>
            <td>${i + 1}</td>
            <td>${movieTitle}</td>
            <td>${formatDate(showtime)}</td>
            <td>${branchName}</td>
            <td>${seatNums}</td>
            <td>${customer}</td>
            <td>${(t.totalPrice || 0).toLocaleString()} ƒë</td>
            <td><span class="badge ${t.ticketStatus}">${translateStatus(t.ticketStatus)}</span></td>
            <td>${renderActionButtons(t)}</td>
        </tr>`;
    }).join("");
}


/* ============================================================
   üîπ 3Ô∏è‚É£ N√∫t h√†nh ƒë·ªông
   ============================================================ */
function renderActionButtons(t) {
    const id = t.ticketId;
    switch (t.ticketStatus) {
        case "CANCEL_REQUESTED":
            return `
                <button class="btn btn-sm btn-outline-warning me-1" onclick="approveCancel(${id})">
                    <i class="fa-solid fa-check"></i> Duy·ªát h·ªßy
                </button>`;
        case "CANCELLED":
            return `
                <button class="btn btn-sm btn-outline-info me-1" onclick="approveRefund(${id})">
                    <i class="fa-solid fa-money-bill-transfer"></i> Ho√†n ti·ªÅn
                </button>`;
        default:
            return `
                <button class="btn btn-sm btn-outline-light" onclick="viewTicket(${id})">
                    <i class="fa-regular fa-eye"></i> Xem
                </button>`;
    }
}

/* ============================================================
   üîπ 4Ô∏è‚É£ Xem chi ti·∫øt v√©
   ============================================================ */
window.viewTicket = async function (id) {
    const token = getValidToken();

    try {
        // D·ªØ li·ªáu s∆° b·ªô trong b·∫£ng
        let ticket = allTickets.find(t => t.ticketId == id) || {};

        // N·∫øu d·ªØ li·ªáu thi·∫øu th√¨ fetch th√™m chi ti·∫øt
        const needMore = !ticket.movieTitle || !ticket.showtimeStart || !ticket.seatNumbers;
        if (needMore) {
            const res = await fetch(`${API_BASE_URL}/tickets/${id}`, {
                headers: { "Authorization": `Bearer ${token}` }
            });
            const detail = await handleResponse(res);
            ticket = { ...ticket, ...detail };
        }

        const detailData = {
            ticketId: ticket.ticketId,
            movieTitle: ticket.movieTitle,
            movieGenre: ticket.movieGenre || "Kh√¥ng r√µ",
            movieDuration: ticket.movieDuration || "?",
            branchName: ticket.branchName,
            auditoriumName: ticket.auditoriumName,
            showtimeStart: ticket.startTime || ticket.showtimeStart,
            showtimeEnd: ticket.showtimeEnd,
            // ‚úÖ fix 2 d√≤ng n√†y:
            seatNumbers: ticket.seatNames || ticket.seatNumbers || "N/A",
            comboList: ticket.combos?.map(c => c.comboName).join(", ") || "Kh√¥ng c√≥",

            totalPrice: ticket.totalPrice,
            paymentMethod: ticket.paymentMethod || "CASH",
            ticketStatus: ticket.ticketStatus
        };

        localStorage.setItem("ticketDetailData", JSON.stringify(detailData));
        window.open(`../tickets/ticketDetail.html?ticketId=${id}`, "_blank");
    } catch (err) {
        console.error("‚ùå L·ªói m·ªü chi ti·∫øt v√©:", err);
        Swal.fire("L·ªói", "Kh√¥ng th·ªÉ m·ªü chi ti·∫øt v√©.", "error");
    }
};

/* ============================================================
   üîπ 5Ô∏è‚É£ Duy·ªát h·ªßy v√©
   ============================================================ */
window.approveCancel = async function (ticketId) {
    const token = getValidToken();
    const staffId = localStorage.getItem("accountId");

    const ok = await Swal.fire({
        title: "X√°c nh·∫≠n duy·ªát h·ªßy v√©?",
        text: "V√© s·∫Ω chuy·ªÉn sang tr·∫°ng th√°i 'ƒê√£ h·ªßy'.",
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "Duy·ªát h·ªßy"
    });
    if (!ok.isConfirmed) return;

    try {
        const res = await fetch(`${API_BASE_URL}/tickets/${ticketId}/approve-cancel?accountId=${staffId}`, {
            method: "PUT",
            headers: { "Authorization": `Bearer ${token}` }
        });
        await handleResponse(res);
        Swal.fire("‚úÖ ƒê√£ duy·ªát", "V√© ƒë√£ ƒë∆∞·ª£c h·ªßy.", "success");
        loadTickets();
    } catch (err) {
        Swal.fire("‚ùå L·ªói", "Kh√¥ng th·ªÉ duy·ªát h·ªßy v√©.", "error");
    }
};

/* ============================================================
   üîπ 6Ô∏è‚É£ Duy·ªát ho√†n ti·ªÅn
   ============================================================ */
window.approveRefund = async function (ticketId) {
    const token = getValidToken();
    const staffId = localStorage.getItem("accountId");

    const confirm = await Swal.fire({
        title: "X√°c nh·∫≠n ho√†n ti·ªÅn?",
        text: "Sau khi duy·ªát, v√© s·∫Ω chuy·ªÉn sang tr·∫°ng th√°i 'Ho√†n ti·ªÅn'.",
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "Ho√†n ti·ªÅn"
    });
    if (!confirm.isConfirmed) return;

    try {
        const res = await fetch(`${API_BASE_URL}/tickets/${ticketId}/approve-refund?accountId=${staffId}`, {
            method: "PUT",
            headers: { "Authorization": `Bearer ${token}` }
        });
        await handleResponse(res);
        Swal.fire("‚úÖ Th√†nh c√¥ng", "ƒê√£ ho√†n ti·ªÅn cho v√©.", "success");
        loadTickets();
    } catch (err) {
        Swal.fire("‚ùå L·ªói", "Kh√¥ng th·ªÉ ho√†n ti·ªÅn v√©.", "error");
        console.error(err);
    }
};

/* ============================================================
   üîπ 7Ô∏è‚É£ L·ªçc + t√¨m ki·∫øm v√©
   ============================================================ */
statusFilter.addEventListener("change", applyFilters);
searchBox.addEventListener("input", applyFilters);
refreshBtn.addEventListener("click", loadTickets);

function applyFilters() {
    let filtered = allTickets;
    const st = statusFilter.value;
    const kw = searchBox.value.trim().toLowerCase();

    if (st) filtered = filtered.filter(t => t.ticketStatus === st);
    if (kw) filtered = filtered.filter(t =>
        t.movieTitle?.toLowerCase().includes(kw) ||
        t.branchName?.toLowerCase().includes(kw) ||
        t.customerName?.toLowerCase().includes(kw)
    );

    renderTickets(filtered);
}

/* ============================================================
   üîπ 8Ô∏è‚É£ H√†m ti·ªán √≠ch
   ============================================================ */
function formatDate(d) {
    if (!d) return "-";
    const date = new Date(d);
    if (isNaN(date)) return "-";
    return date.toLocaleString("vi-VN", { dateStyle: "short", timeStyle: "short" });
}

function translateStatus(st) {
    switch (st) {
        case "BOOKED": return "ƒê√£ ƒë·∫∑t";
        case "USED": return "ƒê√£ s·ª≠ d·ª•ng";
        case "CANCELLED": return "ƒê√£ h·ªßy";
        case "REFUNDED": return "Ho√†n ti·ªÅn";
        case "CANCEL_REQUESTED": return "Ch·ªù h·ªßy";
        default: return st;
    }
}

loadTickets();
