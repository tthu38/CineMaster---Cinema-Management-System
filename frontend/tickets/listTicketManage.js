import { API_BASE_URL, getValidToken, handleResponse } from "../js/api.js";

const ticketBody = document.getElementById("ticketBody");
const statusFilter = document.getElementById("statusFilter");
const searchBox = document.getElementById("searchBox");
const refreshBtn = document.getElementById("refreshBtn");

let allTickets = [];

async function loadTickets() {
    try {
        const token = getValidToken();
        const branchId = localStorage.getItem("branchId");

        const res = await fetch(`${API_BASE_URL}/tickets/branch/${branchId}`, {
            headers: { "Authorization": `Bearer ${token}` }
        });
        const json = await handleResponse(res);
        allTickets = json.data || json.result || json;
        renderTickets(allTickets);
    } catch (err) {
        console.error("‚ùå L·ªói t·∫£i v√©:", err);
        ticketBody.innerHTML = `<tr><td colspan="9" class="text-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch v√©.</td></tr>`;
    }
}

function renderTickets(data) {
    if (!data || data.length === 0) {
        ticketBody.innerHTML = `<tr><td colspan="9" class="text-muted">Kh√¥ng c√≥ v√© n√†o.</td></tr>`;
        return;
    }

    ticketBody.innerHTML = data.map((t, i) => `
        <tr>
            <td>${i + 1}</td>
            <td>${t.movieTitle}</td>
            <td>${formatDate(t.showtimeStart)}</td>
            <td>${t.branchName}</td>
            <td>${t.seatNumbers || "-"}</td>
            <td>${t.customerName || "Kh√°ch v√£ng lai"}</td>
            <td>${(t.totalPrice || 0).toLocaleString()} ƒë</td>
            <td><span class="badge ${t.ticketStatus}">${translateStatus(t.ticketStatus)}</span></td>
            <td>${renderActionButtons(t)}</td>
        </tr>
    `).join("");
}

/* ‚úÖ Ch·ªâ cho ph√©p h√†nh ƒë·ªông khi ph√π h·ª£p tr·∫°ng th√°i:
   - CancelRequested ‚Üí hi·ªÉn th·ªã ‚ÄúDuy·ªát h·ªßy v√©‚Äù
   - Cancelled ‚Üí hi·ªÉn th·ªã ‚ÄúHo√†n ti·ªÅn‚Äù
   - C√°c tr·∫°ng th√°i kh√°c (Booked, Used, Refunded) ‚Üí ch·ªâ n√∫t ‚ÄúXem‚Äù
*/
function renderActionButtons(t) {
    const id = t.ticketId;
    switch (t.ticketStatus) {
        case "CancelRequested":
            return `
                <button class="btn btn-sm btn-outline-warning me-1" onclick="approveCancel(${id})">
                    <i class="fa-solid fa-check"></i> Duy·ªát h·ªßy
                </button>`;
        case "Cancelled":
            return `
                <button class="btn btn-sm btn-outline-info me-1" onclick="approveRefund(${id})">
                    <i class="fa-solid fa-money-bill-transfer"></i> Ho√†n ti·ªÅn
                </button>`;
        default:
            return `
                <button class="btn btn-sm btn-outline-light" onclick="viewTicket(${id})">
                    <i class="fa-regular fa-eye"></i> Xem
                </button>`;
    }
}

// ====== C√°c thao t√°c ======
window.viewTicket = function(id) {
    window.open(`../tickets/ticketDetail.html?ticketId=${id}`, "_blank");
};

// ‚úÖ Duy·ªát h·ªßy v√©
window.approveCancel = async function(ticketId) {
    const token = getValidToken();
    const staffId = localStorage.getItem("accountId");
    const ok = await Swal.fire({
        title: "X√°c nh·∫≠n duy·ªát h·ªßy v√©?",
        text: "V√© s·∫Ω chuy·ªÉn sang tr·∫°ng th√°i 'ƒê√£ h·ªßy'.",
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "Duy·ªát h·ªßy"
    });
    if (!ok.isConfirmed) return;

    try {
        const res = await fetch(`${API_BASE_URL}/tickets/${ticketId}/approve-cancel?accountId=${staffId}`, {
            method: "PUT",
            headers: { Authorization: `Bearer ${token}` }
        });
        await handleResponse(res);
        Swal.fire("‚úÖ ƒê√£ duy·ªát", "V√© ƒë√£ ƒë∆∞·ª£c h·ªßy.", "success");
        loadTickets();
    } catch (err) {
        Swal.fire("‚ùå L·ªói", "Kh√¥ng th·ªÉ duy·ªát h·ªßy v√©.", "error");
    }
};

// üí∞ Duy·ªát ho√†n ti·ªÅn
window.approveRefund = async function(ticketId) {
    const token = getValidToken();
    const staffId = localStorage.getItem("accountId");
    const confirm = await Swal.fire({
        title: "X√°c nh·∫≠n ho√†n ti·ªÅn?",
        text: "Sau khi duy·ªát, v√© s·∫Ω chuy·ªÉn sang tr·∫°ng th√°i 'Ho√†n ti·ªÅn'.",
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "Ho√†n ti·ªÅn"
    });
    if (!confirm.isConfirmed) return;

    try {
        const res = await fetch(`${API_BASE_URL}/tickets/${ticketId}/approve-refund?accountId=${staffId}`, {
            method: "PUT",
            headers: { Authorization: `Bearer ${token}` }
        });
        await handleResponse(res);
        Swal.fire("‚úÖ Th√†nh c√¥ng", "ƒê√£ ho√†n ti·ªÅn cho v√©.", "success");
        loadTickets();
    } catch (err) {
        Swal.fire("‚ùå L·ªói", "Kh√¥ng th·ªÉ ho√†n ti·ªÅn v√©.", "error");
        console.error(err);
    }
};

// ====== L·ªçc / T√¨m ki·∫øm ======
statusFilter.addEventListener("change", applyFilters);
searchBox.addEventListener("input", applyFilters);
refreshBtn.addEventListener("click", loadTickets);

function applyFilters() {
    let filtered = allTickets;
    const st = statusFilter.value;
    const kw = searchBox.value.trim().toLowerCase();

    if (st) filtered = filtered.filter(t => t.ticketStatus === st);
    if (kw) filtered = filtered.filter(t =>
        t.movieTitle.toLowerCase().includes(kw) ||
        t.branchName.toLowerCase().includes(kw) ||
        (t.customerName?.toLowerCase().includes(kw))
    );
    renderTickets(filtered);
}

// ====== Helpers ======
function formatDate(d) {
    return new Date(d).toLocaleString("vi-VN", { dateStyle: "short", timeStyle: "short" });
}

function translateStatus(st) {
    switch (st) {
        case "Booked": return "ƒê√£ ƒë·∫∑t";
        case "Used": return "ƒê√£ s·ª≠ d·ª•ng";
        case "Cancelled": return "ƒê√£ h·ªßy";
        case "Refunded": return "Ho√†n ti·ªÅn";
        case "CancelRequested": return "Ch·ªù h·ªßy";
        default: return st;
    }
}

loadTickets();
