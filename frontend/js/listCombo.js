import { comboApi, branchApi, requireAuth } from "./api.js";

let dataTable;
let allCombos = [];
let currentBranch = "";
let currentAvailable = "";
let currentKeyword = "";

// ===== Init =====
async function init() {
    if (!requireAuth()) return;

    await loadBranches();
    await loadCombos();

    // üéØ L·ªçc theo chi nh√°nh
    document.getElementById("branchFilter").addEventListener("change", handleFilters);

    // üéØ L·ªçc theo tr·∫°ng th√°i (c√≥ s·∫µn / h·∫øt h√†ng)
    document.querySelectorAll(".filter-btn").forEach(btn => {
        btn.addEventListener("click", () => {
            document.querySelectorAll(".filter-btn").forEach(b => b.classList.remove("active"));
            btn.classList.add("active");
            currentAvailable = btn.dataset.available; // "", "1", "0"
            handleFilters();
        });
    });

    // üéØ T√¨m ki·∫øm realtime
    const searchInput = document.getElementById("searchInput");
    searchInput.addEventListener("input", () => {
        currentKeyword = searchInput.value.trim().toLowerCase();
        handleFilters();
    });
}

// ===== Load danh s√°ch chi nh√°nh =====
async function loadBranches() {
    try {
        const data = await branchApi.getAll();
        if (!data) return;

        const branchSelect = document.getElementById("branchFilter");
        branchSelect.innerHTML = `<option value="">T·∫•t c·∫£ Chi Nh√°nh</option>`;
        data.forEach(branch => {
            branchSelect.innerHTML += `
                <option value="${branch.id}">
                    ${branch.branchName || branch.name}
                </option>`;
        });
    } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i chi nh√°nh:", err);
    }
}

// ===== Load danh s√°ch combo =====
async function loadCombos() {
    try {
        const data = await comboApi.getAll();
        if (!data) return;
        allCombos = data;
        renderTable(data);
    } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i combo:", err);
    }
}

// ===== K·∫øt h·ª£p t·∫•t c·∫£ c√°c b·ªô l·ªçc =====
function handleFilters() {
    const branchId = document.getElementById("branchFilter").value;
    currentBranch = branchId;

    let filtered = [...allCombos];

    // üîπ L·ªçc theo chi nh√°nh
    if (branchId) {
        filtered = filtered.filter(c => String(c.branchId) === String(branchId));
    }

    // üîπ L·ªçc theo tr·∫°ng th√°i
    if (currentAvailable === "1") {
        filtered = filtered.filter(c => c.available === true);
    } else if (currentAvailable === "0") {
        filtered = filtered.filter(c => c.available === false);
    }

    // üîπ L·ªçc theo t·ª´ kh√≥a (t√™n + m√¥ t·∫£ + items + gi√°)
    if (currentKeyword) {
        const keyword = currentKeyword.replace(/[^\w\s]/g, ""); // lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
        filtered = filtered.filter(c => {
            const text = `${c.nameCombo} ${c.descriptionCombo || ""} ${c.items || ""}`.toLowerCase();
            const priceText = c.price ? c.price.toString().toLowerCase() : "";
            const formattedPrice = c.price ? c.price.toLocaleString("vi-VN") : "";

            // üîç So s√°nh c·∫£ chu·ªói s·ªë v√† chu·ªói hi·ªÉn th·ªã c√≥ d·∫•u ch·∫•m
            return (
                text.includes(keyword) ||
                priceText.includes(keyword) ||
                formattedPrice.includes(keyword)
            );
        });
    }

    renderTable(filtered);
}

// ===== X√≥a m·ªÅm combo =====
window.deleteCombo = async function (id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën ·∫©n combo n√†y kh√¥ng?")) return;
    try {
        await comboApi.delete(id);
        alert("‚úÖ Combo ƒë√£ ƒë∆∞·ª£c ·∫©n (x√≥a m·ªÅm)!");
        await loadCombos();
        handleFilters();
    } catch (err) {
        console.error("‚ùå L·ªói khi x√≥a combo:", err);
        alert("L·ªói khi x√≥a combo!");
    }
};

// ===== Kh√¥i ph·ª•c combo =====
window.restoreCombo = async function (id) {
    if (!confirm("Kh√¥i ph·ª•c combo n√†y?")) return;
    try {
        await comboApi.restore(id);
        alert("‚úÖ Combo ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c!");
        await loadCombos();
        handleFilters();
    } catch (err) {
        console.error("‚ùå L·ªói khi kh√¥i ph·ª•c combo:", err);
        alert("L·ªói khi kh√¥i ph·ª•c combo!");
    }
};

// ===== Render b·∫£ng =====
function renderTable(data) {
    if (dataTable) dataTable.destroy();

    const tbody = document.querySelector("#comboTable tbody");
    tbody.innerHTML = "";

    data.forEach(combo => {
        const imageUrl = combo.imageURL
            ? (combo.imageURL.startsWith("http")
                ? combo.imageURL
                : `http://localhost:8080${combo.imageURL}`)
            : null;

        tbody.innerHTML += `
            <tr>
                <td>
                    ${
            imageUrl
                ? `<img src="${imageUrl}" width="60" class="rounded">`
                : `<span class="text-muted">No Image</span>`
        }
                </td>
                <td>${combo.nameCombo}</td>
                <td>${combo.price.toLocaleString("vi-VN")} ƒë</td>
                <td title="${combo.descriptionCombo || ""}">${combo.descriptionCombo || ""}</td>
                <td title="${combo.items || ""}">${combo.items || ""}</td>
                <td>
                    <span class="status-dot ${combo.available ? "status-active" : "status-inactive"}"></span>
                </td>
                <td>${combo.branchName || ""}</td>
                <td>
                    <a href="updateCombo.html?id=${combo.id}" class="btn btn-warning btn-sm">S·ª≠a</a>
                    ${
            combo.available
                ? `<button class="btn btn-danger btn-sm" onclick="deleteCombo(${combo.id})">·∫®n</button>`
                : `<button class="btn btn-success btn-sm" onclick="restoreCombo(${combo.id})">Kh√¥i ph·ª•c</button>`
        }
                </td>
            </tr>`;
    });

    dataTable = new DataTable("#comboTable", {
        paging: true,
        searching: false,
        info: false,
        pageLength: 10,
        lengthChange: false,
    });
}

// ===== Start =====
document.addEventListener("DOMContentLoaded", init);
