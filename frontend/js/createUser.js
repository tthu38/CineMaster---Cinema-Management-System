import { accountApi } from "./api/accountApi.js";
import { branchApi } from "./api/branchApi.js";
import { requireAuth } from "./api/config.js";

document.addEventListener("DOMContentLoaded", async () => {
    if (!requireAuth()) return;

    const form = document.getElementById("createAccountForm");
    const branchSelect = document.getElementById("branch");
    const roleSelect = document.getElementById("roleId");
    const avatarInput = document.getElementById("avatarFile");

    // ===== L·∫§Y TH√îNG TIN NG∆Ø·ªúI D√ôNG HI·ªÜN T·∫†I =====
    const currentRole = localStorage.getItem("role");
    const managerBranchId = localStorage.getItem("branchId");

    // üö´ STAFF: kh√¥ng ƒë∆∞·ª£c truy c·∫≠p trang t·∫°o t√†i kho·∫£n
    if (currentRole === "Staff") {
        alert("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o t√†i kho·∫£n!");
        window.location.href = "viewUser.html";
        return;
    }

    // ===== HI·ªÇN TH·ªä DANH S√ÅCH CHI NH√ÅNH =====
    if (currentRole === "Manager") {
        // Manager ch·ªâ ƒë∆∞·ª£c t·∫°o t√†i kho·∫£n trong chi nh√°nh c·ªßa m√¨nh
        branchSelect.innerHTML = `<option value="${managerBranchId}">Chi nh√°nh c·ªßa b·∫°n (#${managerBranchId})</option>`;
        branchSelect.disabled = true;
    } else {
        // Admin ƒë∆∞·ª£c ch·ªçn chi nh√°nh b·∫•t k·ª≥
        try {
            const branches = await branchApi.getAll();
            branchSelect.innerHTML = `<option value="">-- Ch·ªçn chi nh√°nh --</option>`;
            branches.forEach(b => {
                const val = b.branchID ?? b.id ?? b.branchId;
                branchSelect.innerHTML += `<option value="${val}">${b.branchName}</option>`;
            });
        } catch (err) {
            console.error("‚ùå L·ªói khi t·∫£i danh s√°ch chi nh√°nh:", err);
            branchSelect.innerHTML = `<option value="">(Kh√¥ng t·∫£i ƒë∆∞·ª£c chi nh√°nh)</option>`;
        }
    }

    // ===== GI·ªöI H·∫†N ROLE THEO NG∆Ø·ªúI ƒêANG ƒêƒÇNG NH·∫¨P =====
    if (currentRole === "Manager") {
        // Manager ch·ªâ ƒë∆∞·ª£c t·∫°o nh√¢n vi√™n (Staff)
        roleSelect.innerHTML = `<option value="3">Nh√¢n vi√™n (Staff)</option>`;
    } else if (currentRole === "Admin") {
        // Admin t·∫°o ƒë∆∞·ª£c t·∫•t c·∫£
        roleSelect.innerHTML = `
            <option value="2">Qu·∫£n l√Ω (Manager)</option>
            <option value="3">Nh√¢n vi√™n (Staff)</option>
            <option value="4">Kh√°ch h√†ng (Customer)</option>
        `;
    }

    // ===== SUBMIT FORM =====
    if (!form) return;

    form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // X√°c ƒë·ªãnh branchId ch√≠nh x√°c
        const branchIdValue = currentRole === "Manager"
            ? parseInt(managerBranchId, 10)
            : parseInt(branchSelect.value, 10);

        if (!branchIdValue || isNaN(branchIdValue)) {
            alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn chi nh√°nh h·ª£p l·ªá!");
            return;
        }

        // Thu th·∫≠p d·ªØ li·ªáu t·ª´ form
        const accountData = {
            email: document.getElementById("email").value.trim(),
            password: document.getElementById("password").value,
            fullName: document.getElementById("fullname").value.trim(),
            phoneNumber: document.getElementById("phone").value.trim(),
            address: document.getElementById("address").value.trim(),
            roleId: parseInt(roleSelect.value),
            branchId: branchIdValue,
            isActive: document.getElementById("isActive").value === "true"
        };

        const avatarFile = avatarInput.files[0] || null;
        console.log("üì¶ D·ªØ li·ªáu g·ª≠i ƒëi:", accountData);

        try {
            await accountApi.create(accountData, avatarFile);
            alert("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng!");
            window.location.href = "viewUser.html";
        } catch (err) {
            console.error("‚ùå Error creating account:", err);
            alert(err?.message || "‚ùå L·ªói khi t·∫°o t√†i kho·∫£n!");
        }
    });
});
