const API_BASE_URL = 'http://localhost:8080';
const API_URL = API_BASE_URL + '/api/v1/auditoriums';
const BRANCH_API_URL = API_BASE_URL + '/api/v1/branches';
const API_AUDITORIUM_BY_BRANCH = API_URL + '/branch';

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM
const auditoriumForm = document.getElementById('auditorium-form');
const auditoriumsBody = document.getElementById('auditoriums-body');
const loadButton = document.getElementById('load-auditoriums');
const formTitle = document.getElementById('form-title');
const submitBtn = document.getElementById('submit-btn');
const cancelBtn = document.getElementById('cancel-btn');
const auditoriumIdField = document.getElementById('auditoriumID');
const paginationControls = document.getElementById('pagination-controls');

// C√°c Element Dropdown
const branchSelect = document.getElementById('branchID');
const filterBranchSelect = document.getElementById('filterBranchID');

// Bi·∫øn c·ªù v√† ph√¢n trang
let isBranchesLoaded = false;
let allAuditoriumsData = [];
let currentPage = 1;
const ITEMS_PER_PAGE = 10;


// --- H√ÄM T·∫†O C√ÅC N√öT PH√ÇN TRANG (Gi·ªØ nguy√™n) ---
function renderPaginationControls(totalPages) {
    paginationControls.innerHTML = '';
    if (totalPages <= 1) return;

    const ul = document.createElement('ul');
    ul.className = 'pagination pagination-sm';

    const createPageLink = (text, pageNumber, isDisabled = false, isCurrent = false) => {
        const li = document.createElement('li');
        li.className = `page-item ${isDisabled ? 'disabled' : ''} ${isCurrent ? 'active' : ''}`;
        const a = document.createElement('a');
        a.href = '#';
        a.className = 'page-link';
        a.innerHTML = text;

        if (!isDisabled) {
            a.onclick = (e) => {
                e.preventDefault();
                displayAuditoriums(pageNumber);
            };
        }
        li.appendChild(a);
        return li;
    };

    ul.appendChild(createPageLink('&laquo;', currentPage - 1, currentPage === 1));

    const maxPagesToShow = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

    if (endPage - startPage + 1 < maxPagesToShow) {
        startPage = Math.max(1, endPage - maxPagesToShow + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
        ul.appendChild(createPageLink(i, i, false, i === currentPage));
    }

    ul.appendChild(createPageLink('&raquo;', currentPage + 1, currentPage === totalPages));
    paginationControls.appendChild(ul);
}


// --- H√ÄM HI·ªÇN TH·ªä D·ªÆ LI·ªÜU ƒê√É PH√ÇN TRANG (Gi·ªØ nguy√™n) ---
function displayAuditoriums(page = 1) {
    auditoriumsBody.innerHTML = '';

    if (allAuditoriumsData.length === 0) {
        auditoriumsBody.innerHTML = '<tr><td colspan="7" class="text-center" style="color:var(--muted)">Kh√¥ng t√¨m th·∫•y ph√≤ng chi·∫øu n√†o.</td></tr>';
        paginationControls.innerHTML = '';
        return;
    }

    const totalItems = allAuditoriumsData.length;
    const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);

    if (page < 1) page = 1;
    if (page > totalPages) page = totalPages;
    currentPage = page;

    const start = (currentPage - 1) * ITEMS_PER_PAGE;
    const end = start + ITEMS_PER_PAGE;
    const auditoriumsToDisplay = allAuditoriumsData.slice(start, end);

    renderPaginationControls(totalPages);

    auditoriumsToDisplay.forEach(auditorium => {
        const row = auditoriumsBody.insertRow();
        row.insertCell(0).textContent = auditorium.auditoriumID;
        row.insertCell(1).textContent = auditorium.name;
        row.insertCell(2).textContent = auditorium.branchName;
        row.insertCell(3).textContent = auditorium.type;
        row.insertCell(4).textContent = auditorium.capacity;

        // C·ªôt Tr·∫°ng Th√°i
        const statusCell = row.insertCell(5);
        const statusText = auditorium.isActive ? 'Ho·∫°t ƒë·ªông' : 'ƒê√£ ƒë√≥ng';
        const statusClass = auditorium.isActive ? 'text-success fw-bold' : 'text-danger';
        statusCell.innerHTML = `<span class="${statusClass}">${statusText}</span>`;

        const actionsCell = row.insertCell(6);

        const editBtn = document.createElement('button');
        editBtn.textContent = 'S·ª≠a';
        editBtn.className = 'btn btn-warning btn-sm me-2 edit-btn';
        editBtn.onclick = () => populateFormForUpdate(auditorium);
        actionsCell.appendChild(editBtn);

        // N√∫t Toggle Tr·∫°ng Th√°i
        const toggleBtn = document.createElement('button');
        const toggleText = auditorium.isActive ? 'ƒê√≥ng' : 'M·ªü l·∫°i';
        toggleBtn.textContent = toggleText;
        toggleBtn.className = `btn btn-sm ${auditorium.isActive ? 'btn-danger delete-btn' : 'btn-info'}`;
        // üî• L·ªói 403 x·∫£y ra ·ªü ƒë√¢y: B·∫†N C·∫¶N CH·ªà ƒê·ªäNH API S·∫º ƒê∆Ø·ª¢C G·ªåI
        toggleBtn.onclick = () => toggleAuditoriumStatus(auditorium.auditoriumID, !auditorium.isActive);
        actionsCell.appendChild(toggleBtn);
    });
}


// --- H√ÄM T·∫¢I DANH S√ÅCH CHI NH√ÅNH V√ÄO DROPDOWN (Gi·ªØ nguy√™n) ---
async function loadBranches() {
    if (isBranchesLoaded) return;

    branchSelect.innerHTML = '<option value="" disabled selected>ƒêang t·∫£i chi nh√°nh...</option>';
    filterBranchSelect.innerHTML = '<option value="" disabled selected>ƒêang t·∫£i...</option>';

    try {
        const response = await fetch(BRANCH_API_URL);
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch chi nh√°nh.');
        }
        const branches = await response.json();

        // 1. Chu·∫©n b·ªã dropdown FORM (branchID) - L·∫•y T·∫§T C·∫¢ Chi nh√°nh
        branchSelect.innerHTML = '<option value="" disabled selected hidden>--- Ch·ªçn Chi Nh√°nh (C·∫ßn ch√∫ √Ω tr·∫°ng th√°i) ---</option>';

        // 2. Chu·∫©n b·ªã dropdown L·ªåC (filterBranchID) - L·∫§Y T·∫§T C·∫¢ Chi nh√°nh
        filterBranchSelect.innerHTML = '<option value="">--- T·∫•t C·∫£ Chi Nh√°nh ---</option>';

        if (branches.length === 0) {
            const noBranchOption = '<option value="" disabled>Kh√¥ng c√≥ chi nh√°nh n√†o.</option>';
            branchSelect.innerHTML = noBranchOption;
            filterBranchSelect.innerHTML = noBranchOption;
            return;
        }

        branches.forEach(branch => {
            const optionValue = branch.branchId;
            // Hi·ªÉn th·ªã r√µ r√†ng chi nh√°nh n√†o ƒê√£ ƒë√≥ng
            const statusLabel = branch.isActive ? '' : ' (ƒê√£ ƒë√≥ng ‚ö†Ô∏è)';
            const optionText = branch.branchName + statusLabel;

            // Th√™m v√†o dropdown L·ªåC
            const filterOption = new Option(optionText, optionValue);
            filterBranchSelect.appendChild(filterOption);

            // Th√™m v√†o dropdown FORM (branchID) - Cho ph√©p ch·ªçn c·∫£ chi nh√°nh ƒëang ƒë√≥ng
            const createOption = new Option(optionText, optionValue);
            branchSelect.appendChild(createOption);

            // T√πy ch·ªçn: Th√™m CSS c·∫£nh b√°o cho chi nh√°nh ƒëang ƒë√≥ng
            if (!branch.isActive) {
                createOption.style.color = '#ff9999';
            }
        });

        isBranchesLoaded = true;

    } catch (error) {
        console.error('L·ªói khi t·∫£i chi nh√°nh:', error);
        const errorOption = '<option value="" disabled selected>L·ªói t·∫£i chi nh√°nh.</option>';
        branchSelect.innerHTML = errorOption;
        filterBranchSelect.innerHTML = errorOption;
    }
}


// --- H√ÄM T·∫¢I AUDITORIUMS (READ ALL / L·ªåC) (Gi·ªØ nguy√™n) ---
async function loadAuditoriums() {
    await loadBranches();

    auditoriumsBody.innerHTML = '<tr><td colspan="7" class="text-center" style="color:var(--muted)">ƒêang t·∫£i danh s√°ch...</td></tr>';
    paginationControls.innerHTML = '';

    let url;
    const selectedBranchId = filterBranchSelect.value;

    // L·ªçc theo t·∫•t c·∫£ chi nh√°nh (bao g·ªìm c·∫£ chi nh√°nh ƒë√£ ƒë√≥ng)
    if (selectedBranchId && selectedBranchId !== "") {
        url = `${API_AUDITORIUM_BY_BRANCH}/${selectedBranchId}`;
    } else {
        url = API_URL; // L·∫•y T·∫§T C·∫¢ Auditorium
    }

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        allAuditoriumsData = await response.json();
        displayAuditoriums(1);

    } catch (error) {
        console.error('L·ªói khi t·∫£i danh s√°ch ph√≤ng chi·∫øu:', error);
        Swal.fire('L·ªói K·∫øt N·ªëi', 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√≤ng chi·∫øu t·ª´ server.', 'error');
        auditoriumsBody.innerHTML = `<tr><td colspan="7" class="text-center" style="color:var(--red)">L·ªói k·∫øt n·ªëi: ${error.message}</td></tr>`;
        paginationControls.innerHTML = '';
    }
}

// --- H√ÄM T·∫†O/C·∫¨P NH·∫¨T (Gi·ªØ nguy√™n) ---
async function handleFormSubmission(e) {
    e.preventDefault();

    if (branchSelect.value === "") {
        Swal.fire('L·ªói D·ªØ Li·ªáu', 'Vui l√≤ng ch·ªçn m·ªôt Chi Nh√°nh.', 'warning');
        return;
    }

    const id = auditoriumIdField.value;
    const isUpdate = id !== '';
    const method = isUpdate ? 'PUT' : 'POST';
    const url = isUpdate ? `${API_URL}/${id}` : API_URL;

    const requestBody = {
        name: document.getElementById('auditoriumName').value,
        capacity: parseInt(document.getElementById('capacity').value),
        type: document.getElementById('type').value,
        branchID: parseInt(branchSelect.value)
    };

    try {
        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody),
        });

        if (response.ok || response.status === 201) {
            Swal.fire({
                title: 'Th√†nh c√¥ng!',
                text: `Ph√≤ng chi·∫øu ƒë√£ ƒë∆∞·ª£c ${isUpdate ? 'c·∫≠p nh·∫≠t' : 't·∫°o'} th√†nh c√¥ng!`,
                icon: 'success',
                timer: 2000
            });

            resetForm();
            loadAuditoriums();
        } else {
            const errorData = await response.json().catch(() => ({ message: response.statusText || 'L·ªói kh√¥ng x√°c ƒë·ªãnh' }));
            console.error(errorData);

            let errorMessage = `L·ªói ${response.status}: ${errorData.message || errorData.error || 'Vui l√≤ng ki·ªÉm tra ID Chi Nh√°nh ho·∫∑c d·ªØ li·ªáu ƒë·∫ßu v√†o.'}`;

            if (response.status === 400 && errorData.errors && Array.isArray(errorData.errors)) {
                errorMessage += '<br><br>Chi ti·∫øt l·ªói: <ul>' + errorData.errors.map(err => `<li>${err.defaultMessage || err.field}</li>`).join('') + '</ul>';
            }

            Swal.fire('Th·∫•t b·∫°i', errorMessage, 'error');
        }
    } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω:', error);
        Swal.fire('L·ªói K·∫øt N·ªëi', 'L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.', 'error');
    }
}


// ------------------------------------------------------------------
// üî• ƒê√É S·ª¨A: H√ÄM ƒê√ìNG/M·ªû L·∫†I PH√íNG CHI·∫æU S·ª¨ D·ª§NG DELETE V√Ä POST
// ------------------------------------------------------------------
async function toggleAuditoriumStatus(id, newStatus) {
    let action = newStatus ? 'm·ªü l·∫°i' : 'ƒë√≥ng';
    let url;
    let method;

    // D·ª±a v√†o newStatus ƒë·ªÉ ch·ªçn ph∆∞∆°ng th·ª©c v√† URL ch√≠nh x√°c:
    if (newStatus) {
        // N·∫øu newStatus = TRUE: M·ªû L·∫†I -> D√πng POST /activate
        url = `${API_URL}/${id}/activate`;
        method = 'POST';
    } else {
        // N·∫øu newStatus = FALSE: ƒê√ìNG -> D√πng DELETE (Deactivate)
        url = `${API_URL}/${id}`;
        method = 'DELETE';
    }

    const confirmText = newStatus ? 'ƒê√∫ng, M·ªû L·∫†I n√≥!' : 'ƒê√∫ng, ƒê√ìNG n√≥!';
    const icon = newStatus ? 'info' : 'warning';

    const branchId = allAuditoriumsData.find(a => a.auditoriumID === id)?.branchID;
    const branchOption = filterBranchSelect.querySelector(`option[value="${branchId}"]`);
    const isBranchInactive = branchOption && branchOption.textContent.includes('(ƒê√£ ƒë√≥ng ‚ö†Ô∏è)');

    let warningHtml = `B·∫°n s·∫Ω **${action}** ph√≤ng chi·∫øu **ID: ${id}**.`;

    if (newStatus && isBranchInactive) {
        warningHtml += `<br><br>üö® **C·∫¢NH B√ÅO:** Chi nh√°nh n√†y ƒëang ·ªü tr·∫°ng th√°i **ƒê√£ ƒë√≥ng** tr√™n h·ªá th·ªëng. M·ªü l·∫°i ph√≤ng chi·∫øu s·∫Ω kh√¥ng l√†m ph√≤ng xu·∫•t hi·ªán tr√™n trang kh√°ch h√†ng cho ƒë·∫øn khi chi nh√°nh ƒë∆∞·ª£c m·ªü l·∫°i.`;
    }

    const result = await Swal.fire({
        title: `X√°c nh·∫≠n ${action} ph√≤ng chi·∫øu?`,
        html: warningHtml,
        icon: icon,
        showCancelButton: true,
        confirmButtonText: confirmText,
        cancelButtonText: 'H·ªßy b·ªè',
        reverseButtons: true,
        customClass: {
            confirmButton: `btn btn-${newStatus ? 'btn-info' : 'btn-danger'} me-3`,
            cancelButton: 'btn btn-secondary'
        },
        buttonsStyling: false
    });

    if (!result.isConfirmed) return;

    try {
        // G·ª≠i y√™u c·∫ßu DELETE ho·∫∑c POST /activate
        const response = await fetch(url, {
            method: method,
            // DELETE/POST /activate kh√¥ng c·∫ßn body, nh∆∞ng v·∫´n c·∫ßn Content-Type
            headers: { 'Content-Type': 'application/json' },
            // KH√îNG c·∫ßn body cho DELETE ho·∫∑c POST /activate theo Controller c·ªßa b·∫°n
            body: null
        });

        if (response.ok || response.status === 204) { // 204 No Content l√† response c·ªßa DELETE/POST th√†nh c√¥ng
            Swal.fire({
                title: 'Th√†nh c√¥ng!',
                text: `Ph√≤ng chi·∫øu ID ${id} ƒë√£ ƒë∆∞·ª£c ${action} th√†nh c√¥ng.`,
                icon: 'success'
            });
            loadAuditoriums();
        } else if (response.status === 403) {
            Swal.fire('Th·∫•t b·∫°i', 'L·ªói 403 Forbidden: Y√™u c·∫ßu c·ªßa b·∫°n b·ªã t·ª´ ch·ªëi do v·∫•n ƒë·ªÅ b·∫£o m·∫≠t (Security Config).', 'error');
        } else {
            const errorText = await response.text();
            Swal.fire('Th·∫•t b·∫°i', `L·ªói ${response.status}: ${errorText || 'Kh√¥ng x√°c ƒë·ªãnh.'}`, 'error');
        }
    } catch (error) {
        console.error(`L·ªói khi ${action} ph√≤ng chi·∫øu:`, error);
        Swal.fire('L·ªói K·∫øt N·ªëi', 'L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra Server Log.', 'error');
    }
}
// ------------------------------------------------------------------


// --- H√ÄM ƒêI·ªÄN D·ªÆ LI·ªÜU V√ÄO FORM (Gi·ªØ nguy√™n) ---
function populateFormForUpdate(auditorium) {
    formTitle.innerHTML = `<i class="fa-solid fa-pen-to-square me-2"></i> C·∫≠p Nh·∫≠t Ph√≤ng Chi·∫øu (ID: ${auditorium.auditoriumID})`;
    submitBtn.innerHTML = '<i class="fa-solid fa-floppy-disk me-2"></i> L∆∞u C·∫≠p Nh·∫≠t';
    cancelBtn.style.display = 'inline-block';

    auditoriumIdField.value = auditorium.auditoriumID;
    document.getElementById('auditoriumName').value = auditorium.name;
    document.getElementById('capacity').value = auditorium.capacity;
    document.getElementById('type').value = document.getElementById('type').value;

    branchSelect.value = auditorium.branchID.toString();

    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// --- H√ÄM ƒê·∫∂T L·∫†I FORM (Gi·ªØ nguy√™n) ---
function resetForm() {
    auditoriumForm.reset();
    auditoriumIdField.value = '';
    formTitle.innerHTML = '<i class="fa-solid fa-plus me-2"></i> Th√™m Ph√≤ng Chi·∫øu M·ªõi';
    submitBtn.innerHTML = '<i class="fa-solid fa-plus me-2"></i> T·∫°o Ph√≤ng Chi·∫øu';
    cancelBtn.style.display = 'none';
}


// --- G·∫ÆN S·ª∞ KI·ªÜN (Gi·ªØ nguy√™n) ---
auditoriumForm.addEventListener('submit', handleFormSubmission);
loadButton.addEventListener('click', loadAuditoriums);
cancelBtn.addEventListener('click', resetForm);
filterBranchSelect.addEventListener('change', loadAuditoriums);


// T·∫£i danh s√°ch khi trang ƒë∆∞·ª£c load l·∫ßn ƒë·∫ßu
document.addEventListener('DOMContentLoaded', loadAuditoriums);
