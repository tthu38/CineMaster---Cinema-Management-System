package com.example.cinemaster.service;

import com.example.cinemaster.configuration.ChatSessionHistory;
import com.example.cinemaster.dto.request.GeminiRequest;
import com.example.cinemaster.dto.response.BranchResponse;
import com.example.cinemaster.dto.response.GeminiResponse;
import com.example.cinemaster.util.ChatFormatter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import static com.example.cinemaster.service.IntentRouterService.ChatIntent;
import static com.example.cinemaster.util.ChatFormatter.*;

@Service
public class ChatbotService {

    private static final String API_BASE_URL =
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=";

    private final String geminiApiKey;
    private final RestTemplate restTemplate;
    private final ChatSessionHistory sessionHistory;
    private final IntentRouterService intentRouterService;
    private final ContextRetrieverService contextRetrieverService;

    public ChatbotService(
            @Value("${gemini.api.key}") String apiKey,
            RestTemplate restTemplate,
            ChatSessionHistory sessionHistory,
            IntentRouterService intentRouterService,
            ContextRetrieverService contextRetrieverService) {
        this.geminiApiKey = apiKey;
        this.restTemplate = restTemplate;
        this.sessionHistory = sessionHistory;
        this.intentRouterService = intentRouterService;
        this.contextRetrieverService = contextRetrieverService;
    }

    /**
     * üéØ Lu·ªìng ch√≠nh x·ª≠ l√Ω RAG
     */
    public String getChatbotResponse(String userInput) {
        try {
            // 1Ô∏è‚É£ Intent detection
            ChatIntent intent = intentRouterService.determineIntent(userInput);
            BranchResponse targetBranch = intentRouterService.findTargetBranch(userInput).orElse(null);

            // 2Ô∏è‚É£ Context retrieval
            String contextData = contextRetrieverService.retrieveContext(intent, targetBranch, userInput);
            if (contextData == null || contextData.isBlank()) {
                contextData = "Hi·ªán h·ªá th·ªëng ch∆∞a c√≥ d·ªØ li·ªáu c·ª• th·ªÉ cho y√™u c·∫ßu n√†y.";
            }

            // 3Ô∏è‚É£ Build system prompt (t·ªëi ∆∞u cho Gemini Markdown)
            String systemPrompt = buildSystemPrompt(contextData);

            // 4Ô∏è‚É£ Call Gemini API
            String answer = callGeminiApi(systemPrompt, userInput);

            // L∆∞u v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i (ch·ªâ gi·ªØ 8 l∆∞·ª£t g·∫ßn nh·∫•t)
            sessionHistory.addMessage(userInput, answer);
            if (sessionHistory.getHistory().size() > 8) {
                sessionHistory.getHistory().remove(0);
            }

            return answer;

        } catch (Exception e) {
            System.err.println("‚ùå [ChatbotService] L·ªói: " + e.getMessage());
            e.printStackTrace();
            return emoji("‚ö†Ô∏è", "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng AI. Vui l√≤ng th·ª≠ l·∫°i sau!");
        }
    }

    /**
     * üß† T·∫°o System Prompt cho Gemini ‚Äî ƒë·∫£m b·∫£o Gemini hi·ªÉu ƒë√∫ng Markdown & context
     */
    private String buildSystemPrompt(String contextData) {
        return String.join("\n",
                "B·∫°n l√† tr·ª£ l√Ω ·∫£o **CineMaster**, chuy√™n h·ªó tr·ª£ kh√°ch h√†ng v·ªÅ l·ªãch chi·∫øu, chi nh√°nh, phim v√† ch√≠nh s√°ch r·∫°p.",
                "H√£y tr·∫£ l·ªùi **ng·∫Øn g·ªçn, r√µ r√†ng, l·ªãch s·ª± v√† b·∫±ng ti·∫øng Vi·ªát**.",
                "QUY T·∫ÆC TR·∫¢ L·ªúI:",
                "- Lu√¥n d√πng th√¥ng tin trong ph·∫ßn D·ªÆ LI·ªÜU C·ª¶A H·ªÜ TH·ªêNG (n·∫øu c√≥).",
                "- N·∫øu th√¥ng tin n√†o hi·ªÉn th·ªã l√† `N/A`, h√£y n√≥i r·∫±ng th√¥ng tin ƒë√≥ hi·ªán ch∆∞a c√≥ trong h·ªá th·ªëng.",
                "- N·∫øu d·ªØ li·ªáu r·ªóng ho·∫∑c kh√¥ng li√™n quan, c√≥ th·ªÉ tr·∫£ l·ªùi chung chung (kh√¥ng b·ªãa).",
                "- Gi·ªØ ƒë·ªãnh d·∫°ng Markdown r√µ r√†ng (d√πng **bold**, danh s√°ch, emoji n·∫øu ph√π h·ª£p).",
                "",
                ChatFormatter.divider(),
                "**Ng√†y hi·ªán t·∫°i:** " + LocalDate.now(),
                mdTitle("üìÇ D·ªÆ LI·ªÜU C·ª¶A H·ªÜ TH·ªêNG"),
                ChatFormatter.jsonBlock(contextData),
                ChatFormatter.divider()
        );
    }

    /**
     * üîó G·ªçi API Gemini (v·ªõi system prompt + user message + session history)
     */
    private String callGeminiApi(String systemPrompt, String userInput) {
        String apiUrl = API_BASE_URL + geminiApiKey;

        // --- System message ---
        GeminiRequest.Part sysPart = new GeminiRequest.Part(systemPrompt);
        GeminiRequest.Content systemContent = new GeminiRequest.Content("system", List.of(sysPart));

        // --- Build conversation history ---
        List<GeminiRequest.Content> history = sessionHistory.getHistory();
        List<GeminiRequest.Content> contents = new ArrayList<>(history);
        contents.add(new GeminiRequest.Content("user", List.of(new GeminiRequest.Part(userInput))));

        GeminiRequest requestBody = new GeminiRequest(contents, systemContent);

        // --- HTTP setup ---
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<GeminiRequest> entity = new HttpEntity<>(requestBody, headers);

        // --- Call API ---
        ResponseEntity<GeminiResponse> response = restTemplate.postForEntity(apiUrl, entity, GeminiResponse.class);
        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            return response.getBody().getFirstResponseText();
        }

        throw new RuntimeException("Gemini API tr·∫£ v·ªÅ l·ªói HTTP " + response.getStatusCode());
    }
}
