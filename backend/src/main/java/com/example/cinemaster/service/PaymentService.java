package com.example.cinemaster.service;

import com.example.cinemaster.entity.Payment;
import com.example.cinemaster.entity.Ticket;
import com.example.cinemaster.entity.TicketHistory;
import com.example.cinemaster.repository.PaymentRepository;
import com.example.cinemaster.repository.TicketHistoryRepository;
import com.example.cinemaster.repository.TicketRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class PaymentService {

    private final TicketRepository ticketRepository;
    private final PaymentRepository paymentRepository;
    private final TicketHistoryRepository ticketHistoryRepository;

    /** ‚úÖ Ghi nh·∫≠n thanh to√°n th√†nh c√¥ng & c·∫≠p nh·∫≠t v√© */
    @Transactional
    public void confirmPaid(String orderCode, String note, BigDecimal amount, Integer ticketId) {
        // ‚úÖ 1Ô∏è‚É£ T√¨m Payment theo orderCode
        Payment payment = paymentRepository.findByOrderCode(orderCode)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y payment " + orderCode));

        // ‚úÖ 2Ô∏è‚É£ L·∫•y Ticket li√™n quan
        Ticket ticket = payment.getTicketID();
        if (ticket == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y v√© li√™n quan ƒë·∫øn thanh to√°n: " + orderCode);
        }

        // ‚úÖ 3Ô∏è‚É£ C·∫≠p nh·∫≠t v√© th√†nh BOOKED
        Ticket.TicketStatus oldStatus = ticket.getTicketStatus();
        ticket.setTicketStatus(Ticket.TicketStatus.BOOKED);
        ticketRepository.save(ticket);

        // ‚úÖ 4Ô∏è‚É£ Ghi l·ªãch s·ª≠ v√© (‚ö†Ô∏è ƒë·ªïi Instant ‚Üí LocalDateTime)
        TicketHistory history = TicketHistory.builder()
                .ticket(ticket)
                .oldStatus(oldStatus != null ? oldStatus.name() : "NULL")
                .newStatus("BOOKED")
                .changedAt(LocalDateTime.now()) // ‚úÖ S·ª≠a d√≤ng n√†y
                .note(note != null ? note : "Thanh to√°n th√†nh c√¥ng qua QR")
                .build();
        ticketHistoryRepository.save(history);

        // ‚úÖ 5Ô∏è‚É£ C·∫≠p nh·∫≠t Payment
        payment.setStatus("PAID");
        payment.setDescription(note);
        payment.setUpdatedAt(LocalDateTime.now());
        paymentRepository.save(payment);

        System.out.println("üíæ ƒê√£ x√°c nh·∫≠n thanh to√°n cho v√© ID=" + ticket.getTicketId());
    }



}
