package com.example.cinemaster.service;

import com.example.cinemaster.entity.DocumentChunk;
import com.example.cinemaster.util.ChatKnowledgeBase;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class VectorStoreService {

    private final EmbeddingService embeddingService;
    // M√î PH·ªéNG: D√πng List ƒë·ªÉ l∆∞u tr·ªØ thay cho Vector Database th·ª±c t·∫ø
    private final List<DocumentChunk> vectorStore = new ArrayList<>();

    public VectorStoreService(EmbeddingService embeddingService) {
        this.embeddingService = embeddingService;
        // Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u
        initializeVectorStore();
    }

    // Ph∆∞∆°ng th·ª©c gi·∫£ l·∫≠p Indexing d·ªØ li·ªáu phi c·∫•u tr√∫c
    private void initializeVectorStore() {
        System.out.println("‚è≥ Indexing d·ªØ li·ªáu m·∫´u...");
        ChatKnowledgeBase.getStaticRules().forEach(rule -> addDocumentChunk(rule, "STATIC_RULE"));
        addDocumentChunk("Gi√° v√© cho h·ªçc sinh sinh vi√™n l√† 50.000 VNƒê, √°p d·ª•ng t·ª´ Th·ª© Hai ƒë·∫øn Th·ª© NƒÉm, ch·ªâ c·∫ßn xu·∫•t tr√¨nh th·∫ª.", "GIA_VE");
        addDocumentChunk("Kh√°ch h√†ng ƒë∆∞·ª£c ph√©p mang theo n∆∞·ªõc u·ªëng ƒë√≥ng chai, nh∆∞ng kh√¥ng ƒë∆∞·ª£c mang ƒë·ªì ƒÉn n√≥ng b√™n ngo√†i v√†o r·∫°p.", "QUY_TAC");
        addDocumentChunk("Ch√≠nh s√°ch ho√†n ti·ªÅn: V√© ƒë√£ mua kh√¥ng ƒë∆∞·ª£c ho√†n tr·∫£, tr·ª´ tr∆∞·ªùng h·ª£p r·∫°p h·ªßy su·∫•t chi·∫øu v√¨ l√Ω do b·∫•t kh·∫£ kh√°ng.", "CHINH_SACH_HUY");
        addDocumentChunk("C√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i th∆∞·ªùng xuy√™n: ƒê·ªìng gi√° cho th√†nh vi√™n v√†o c√°c ng√†y th·ª© 3 h√†ng tu·∫ßn.", "KHUYEN_MAI");
        System.out.println("‚úÖ Indexing ho√†n t·∫•t. " + vectorStore.size() + " chunks ƒë√£ ƒë∆∞·ª£c nh√∫ng.");
    }

    private void addDocumentChunk(String content, String source) {
        List<Double> vector = embeddingService.embedText(content);
        if (!vector.isEmpty()) {
            DocumentChunk chunk = new DocumentChunk(String.valueOf(vectorStore.size()), content, vector, source);
            vectorStore.add(chunk);
        }
    }

    /**
     * T√¨m ki·∫øm Top K ƒëo·∫°n vƒÉn b·∫£n g·∫ßn nh·∫•t v·ªõi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
     */
    public List<String> searchSimilarDocuments(String query, int topK) {
        if (vectorStore.isEmpty()) return List.of();

        // 1Ô∏è‚É£ L·ªçc s∆° b·ªô theo t·ª´ kh√≥a
        String q = query.toLowerCase();
        List<DocumentChunk> filtered = vectorStore.stream()
                .filter(chunk ->
                        chunk.getContent().toLowerCase().contains(q)
                                || (q.matches(".*(h·ªßy|ho√†n ti·ªÅn|refund).*") && chunk.getSource().contains("CHINH_SACH"))
                                || (q.matches(".*(combo|b·∫Øp|n∆∞·ªõc).*") && chunk.getSource().contains("STATIC_RULE"))
                                || (q.matches(".*(gi√° v√©|sinh vi√™n|gi·∫£m gi√°|khuy·∫øn m√£i).*") && chunk.getSource().contains("KHUYEN_MAI"))
                                || (q.matches(".*(ƒë·∫∑t v√©|ch·ªçn gh·∫ø).*") && chunk.getSource().contains("STATIC_RULE"))
                )
                .collect(Collectors.toList());

        if (filtered.isEmpty()) filtered = vectorStore;

        // 2Ô∏è‚É£ Nh√∫ng c√¢u h·ªèi ng∆∞·ªùi d√πng th√†nh vector
        List<Double> queryVector = embeddingService.embedText(query);
        if (queryVector.isEmpty()) return List.of();

        // 3Ô∏è‚É£ T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng
        List<DocumentChunk> ranked = filtered.stream()
                .map(chunk -> {
                    double score = cosineSimilarity(queryVector, chunk.getEmbedding());
                    return new DocumentChunk(
                            chunk.getId(),
                            chunk.getContent(),
                            chunk.getEmbedding(),
                            chunk.getSource(),
                            score
                    );
                })
                .sorted(Comparator.comparingDouble(DocumentChunk::getScore).reversed())
                .limit(topK)
                .collect(Collectors.toList());

        // ‚úÖ 4Ô∏è‚É£ Tr·∫£ v·ªÅ danh s√°ch vƒÉn b·∫£n c√≥ g·∫Øn nh√£n ngu·ªìn
        return ranked.stream()
                .map(chunk -> String.format("[Ngu·ªìn: %s] %s", chunk.getSource(), chunk.getContent()))
                .collect(Collectors.toList());
    }
    // H√†m h·ªó tr·ª£: T√≠nh Cosine Similarity
    private double cosineSimilarity(List<Double> vecA, List<Double> vecB) {
        double dotProduct = 0.0;
        double normA = 0.0;
        double normB = 0.0;

        // Ki·ªÉm tra k√≠ch th∆∞·ªõc vector
        if (vecA.size() != vecB.size()) return 0.0;

        for (int i = 0; i < vecA.size(); i++) {
            dotProduct += vecA.get(i) * vecB.get(i);
            normA += vecA.get(i) * vecA.get(i);
            normB += vecB.get(i) * vecB.get(i);
        }
        if (normA == 0 || normB == 0) return 0.0;
        // √âp ki·ªÉu v·ªÅ double tr∆∞·ªõc khi t√≠nh cƒÉn b·∫≠c hai ƒë·ªÉ tr√°nh l·ªói
        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }

    public void ingestDocuments(String domain, List<String> docs) {
        if (docs == null || docs.isEmpty()) {
            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ ingest cho domain: " + domain);
            return;
        }

        System.out.println("üöÄ B·∫Øt ƒë·∫ßu ingest " + docs.size() + " documents v√†o domain: " + domain);

        for (String content : docs) {
            addDocumentChunk(content, domain);
        }

        System.out.println("‚úÖ Ho√†n t·∫•t ingest domain: " + domain + " | T·ªïng s·ªë chunk hi·ªán t·∫°i: " + vectorStore.size());
    }
}
