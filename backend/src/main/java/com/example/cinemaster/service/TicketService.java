package com.example.cinemaster.service;

import com.example.cinemaster.dto.response.TicketDetailResponse;
import com.example.cinemaster.dto.response.TicketResponse;
import com.example.cinemaster.entity.*;
import com.example.cinemaster.mapper.TicketMapper;
import com.example.cinemaster.repository.AccountRepository;
import com.example.cinemaster.repository.TicketHistoryRepository;
import com.example.cinemaster.repository.TicketRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class TicketService {

    private final TicketRepository ticketRepository;
    private final TicketMapper ticketMapper;
    private final TicketHistoryRepository ticketHistoryRepository;
    private final AccountRepository accountRepository; // ‚úÖ th√™m ƒë·ªÉ load staff th·∫≠t

    /* =============================================================
       üîπ Ti·ªán √≠ch ghi l·ªãch s·ª≠ tr·∫°ng th√°i (d√πng chung)
    ============================================================= */
    private void saveTicketHistory(Ticket ticket, String oldStatus, String newStatus, Account changer, String note) {
        // ‚ö° N·∫øu changer ch·ªâ c√≥ ID (transient) => fetch entity th·∫≠t
        Account realChanger = null;
        if (changer != null && changer.getAccountID() != null) {
            realChanger = accountRepository.findById(changer.getAccountID()).orElse(null);
        }

        TicketHistory history = TicketHistory.builder()
                .ticket(ticket)
                .oldStatus(oldStatus)
                .newStatus(newStatus)
                .changedBy(realChanger)
                .changedAt(Instant.now())
                .note(note)
                .build();

        ticketHistoryRepository.save(history);
    }

    /* =============================================================
       üîπ CUSTOMER: G·ª≠i y√™u c·∫ßu h·ªßy v√©
    ============================================================= */
    @Transactional
    public TicketResponse requestCancel(Integer ticketId, Account requester) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©"));

        String current = ticket.getTicketStatus();
        if (!"Booked".equalsIgnoreCase(current))
            throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ g·ª≠i y√™u c·∫ßu h·ªßy khi v√© ƒëang ·ªü tr·∫°ng th√°i 'Booked'");

        ticket.setTicketStatus("CancelRequested");
        ticketRepository.save(ticket);

        // ‚úÖ L·∫•y lu√¥n account t·ª´ v√© ‚Äî ƒë·∫£m b·∫£o c√≥ ID th·∫≠t trong DB
        Account realCustomer = ticket.getAccount();

        saveTicketHistory(ticket, current, "CancelRequested", realCustomer, "Kh√°ch h√†ng y√™u c·∫ßu h·ªßy v√©");

        return ticketMapper.toResponse(ticket);
    }




    /* =============================================================
       üîπ STAFF: Duy·ªát h·ªßy v√©
    ============================================================= */
    @Transactional
    public TicketResponse approveCancel(Integer ticketId, Account staff) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©"));

        String current = ticket.getTicketStatus();
        if (!"CancelRequested".equalsIgnoreCase(current))
            throw new RuntimeException("Ch·ªâ ph√™ duy·ªát khi v√© ·ªü tr·∫°ng th√°i 'CancelRequested'");

        ticket.setTicketStatus("Cancelled");
        ticketRepository.save(ticket);

        saveTicketHistory(ticket, current, "Cancelled", staff, "Nh√¢n vi√™n duy·ªát h·ªßy v√©");

        return ticketMapper.toResponse(ticket);
    }

    /* =============================================================
       üîπ STAFF / ADMIN: Duy·ªát ho√†n ti·ªÅn v√©
    ============================================================= */
    @Transactional
    public TicketResponse approveRefund(Integer ticketId, Account staff) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©"));

        String current = ticket.getTicketStatus();
        if (!"Cancelled".equalsIgnoreCase(current))
            throw new RuntimeException("Ch·ªâ ho√†n ti·ªÅn cho v√© ƒë√£ b·ªã h·ªßy");

        ticket.setTicketStatus("Refunded");
        ticketRepository.save(ticket);

        saveTicketHistory(ticket, current, "Refunded", staff, "Nh√¢n vi√™n x√°c nh·∫≠n ho√†n ti·ªÅn v√©");

        return ticketMapper.toResponse(ticket);
    }

    /* =============================================================
       üîπ STAFF: Danh s√°ch v√© ch·ªù h·ªßy
    ============================================================= */
    public List<TicketResponse> getPendingCancelTickets(Integer branchId) {
        return ticketRepository.findByBranch(branchId).stream()
                .filter(t -> "CancelRequested".equalsIgnoreCase(t.getTicketStatus()))
                .map(ticketMapper::toResponse)
                .collect(Collectors.toList());
    }

    /* =============================================================
       üîπ CUSTOMER: L·∫•y danh s√°ch v√© c·ªßa ng∆∞·ªùi d√πng
    ============================================================= */
    public List<TicketResponse> getTicketsByAccount(Integer accountID) {
        return ticketRepository.findByAccount_AccountID(accountID).stream()
                .map(ticketMapper::toResponse)
                .collect(Collectors.toList());
    }

    /* =============================================================
       üîπ STAFF: L·∫•y danh s√°ch v√© theo chi nh√°nh
    ============================================================= */
    public List<TicketResponse> getTicketsByBranch(Integer branchId) {
        return ticketRepository.findByBranch(branchId).stream()
                .map(ticketMapper::toResponse)
                .collect(Collectors.toList());
    }

    /* =============================================================
       üîπ STAFF: C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªß c√¥ng (debug / special case)
    ============================================================= */
    @Transactional
    public TicketResponse updateTicketStatus(Integer ticketId, String newStatus, Account staff) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©"));

        String oldStatus = ticket.getTicketStatus();
        ticket.setTicketStatus(newStatus);
        ticketRepository.save(ticket);

        saveTicketHistory(ticket, oldStatus, newStatus, staff, "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªß c√¥ng");

        return ticketMapper.toResponse(ticket);
    }

    /* =============================================================
       üîπ Chi ti·∫øt v√© (c√≥ gh·∫ø + combo)
    ============================================================= */
    public TicketDetailResponse getById(Integer id) {
        Ticket ticket = ticketRepository.findWithRelationsByTicketID(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©"));

        TicketDetailResponse dto = ticketMapper.toDetailResponse(ticket);

        // Gh·∫ø
        String seatNums = (ticket.getTicketSeats() != null && !ticket.getTicketSeats().isEmpty())
                ? ticket.getTicketSeats().stream()
                .map(ts -> ts.getSeat().getSeatNumber())
                .collect(Collectors.joining(", "))
                : "N/A";
        dto.setSeatNumbers(seatNums);

        // Combo
        List<String> combos = (ticket.getTicketCombos() != null && !ticket.getTicketCombos().isEmpty())
                ? ticket.getTicketCombos().stream()
                .map(tc -> tc.getCombo().getNameCombo())
                .collect(Collectors.toList())
                : List.of();
        dto.setComboList(combos);

        dto.setTicketStatus(ticket.getTicketStatus());
        dto.setTotalPrice(ticket.getTotalPrice() != null ? ticket.getTotalPrice().doubleValue() : 0.0);
        dto.setPaymentMethod(ticket.getPaymentMethod());

        return dto;
    }
}
