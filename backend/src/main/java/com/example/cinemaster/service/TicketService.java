package com.example.cinemaster.service;

import com.example.cinemaster.dto.request.TicketComboRequest;
import com.example.cinemaster.dto.request.TicketCreateRequest;
import com.example.cinemaster.dto.response.TicketDetailResponse;
import com.example.cinemaster.dto.response.TicketResponse;
import com.example.cinemaster.entity.*;
import com.example.cinemaster.mapper.TicketMapper;
import com.example.cinemaster.repository.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;

import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.transaction.support.TransactionTemplate;


import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class TicketService {

    private final TicketRepository ticketRepository;
    private final TicketComboRepository ticketComboRepository;
    private final AccountRepository accountRepository;
    private final ShowtimeRepository showtimeRepository;
    private final SeatRepository seatRepository;
    private final DiscountRepository discountRepository;
    private final ComboRepository comboRepository;
    private final TicketMapper ticketMapper;
    private final EmailService emailService;
    private final MembershipService membershipService;
    private final OtpRepository otpRepository;
    private final TicketHistoryRepository ticketHistoryRepository;
    private final GoogleSheetsService googleSheetsService;
    private final TransactionTemplate transactionTemplate;



    /* üü¢ T·∫°o ho·∫∑c c·∫≠p nh·∫≠t v√© t·∫°m */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public TicketResponse createOrUpdateTicket(TicketCreateRequest req) {
        Account account = accountRepository.findById(req.getAccountId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!"));
        Showtime showtime = showtimeRepository.findById(req.getShowtimeId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y su·∫•t chi·∫øu!"));


        Ticket ticket;
        Integer ticketId = req.getTicketId();


        if (ticketId != null && ticketId > 0) {
            ticket = ticketRepository.findById(ticketId).orElse(null);


            boolean invalid =
                    (ticket == null)
                            || !ticket.getAccount().getAccountID().equals(req.getAccountId())
                            || ticket.getTicketStatus() != Ticket.TicketStatus.HOLDING
                            || (ticket.getHoldUntil() != null && ticket.getHoldUntil().isBefore(LocalDateTime.now()));


            if (invalid) {
                log.warn("‚ö†Ô∏è V√© {} kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n, t·∫°o m·ªõi v√©.", ticketId);
                ticket = createNewHoldingTicket(account, showtime, req.getCustomerEmail());
            } else {
                ensureListNotNull(ticket);
                ticket.setHoldUntil(LocalDateTime.now().plusMinutes(5));
                if (req.getCustomerEmail() != null && !req.getCustomerEmail().isBlank())
                    ticket.setCustomerEmail(req.getCustomerEmail());
                ticketRepository.save(ticket);
            }
        } else {
            ticket = ticketRepository
                    .findTopByAccount_AccountIDAndTicketStatusOrderByBookingTimeDesc(
                            req.getAccountId(), Ticket.TicketStatus.HOLDING)
                    .orElseGet(() -> createNewHoldingTicket(account, showtime, req.getCustomerEmail()));


            ensureListNotNull(ticket);
            ticket.setShowtime(showtime);
            ticket.setHoldUntil(LocalDateTime.now().plusMinutes(5));
            ticketRepository.save(ticket);
        }


        ticket.getTicketSeats().size();
        ticket.getTicketCombos().size();
        ticket.getTicketDiscounts().size();


        // ====================== üí∫ 2Ô∏è‚É£ X·ª≠ l√Ω GH·∫æ ======================
        Showtime currentShowtime = ticket.getShowtime();


        List<Integer> occupiedSeats = ticketRepository.findOccupiedSeatIdsByShowtimeExcludeTicket(
                currentShowtime.getShowtimeID(), ticket.getTicketId());


        BigDecimal seatTotal = BigDecimal.ZERO;
        ticket.getTicketSeats().clear();


        for (Integer seatId : req.getSeatIds()) {
            if (occupiedSeats.contains(seatId))
                throw new RuntimeException("Gh·∫ø " + seatId + " ƒë√£ ƒë∆∞·ª£c gi·ªØ ho·∫∑c ƒë·∫∑t!");
            Seat seat = seatRepository.findById(seatId)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y gh·∫ø ID=" + seatId));


            BigDecimal seatPrice = currentShowtime.getPrice()
                    .multiply(seat.getSeatType().getPriceMultiplier());
            seatTotal = seatTotal.add(seatPrice);
            ticket.getTicketSeats().add(new TicketSeat(ticket, seat));
        }


        // ====================== üçø 3Ô∏è‚É£ X·ª≠ l√Ω COMBO ======================
        BigDecimal comboTotal = BigDecimal.ZERO;
        ticket.getTicketCombos().clear();


        if (req.getCombos() != null && !req.getCombos().isEmpty()) {
            for (TicketCreateRequest.ComboItem comboReq : req.getCombos()) {
                Combo combo = comboRepository.findById(comboReq.getComboId())
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y combo ID=" + comboReq.getComboId()));


                BigDecimal subtotal = combo.getPrice()
                        .multiply(BigDecimal.valueOf(comboReq.getQuantity()));
                comboTotal = comboTotal.add(subtotal);


                TicketComboKey key = new TicketComboKey(ticket.getTicketId(), combo.getId());
                TicketCombo tc = TicketCombo.builder()
                        .id(key)
                        .ticket(ticket)
                        .combo(combo)
                        .quantity(comboReq.getQuantity())
                        .build();


                ticket.getTicketCombos().add(tc);
            }
        }


        // ====================== üéÅ 4Ô∏è‚É£ √Åp d·ª•ng ho·∫∑c c·∫≠p nh·∫≠t DISCOUNT ======================
        BigDecimal discountTotal = BigDecimal.ZERO;
        BigDecimal totalBeforeDiscount = seatTotal.add(comboTotal);


        if (req.getDiscountIds() != null && !req.getDiscountIds().isEmpty()) {
            // ‚úÖ FE g·ª≠i discount m·ªõi ‚Üí x√≥a c≈©, t√≠nh l·∫°i m·ªõi
            ticket.getTicketDiscounts().clear();
            for (Integer discountId : req.getDiscountIds()) {
                Discount discount = discountRepository.findById(discountId)
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y discount ID=" + discountId));


                BigDecimal discountValue = discount.getValue(totalBeforeDiscount);
                discountTotal = discountTotal.add(discountValue);


                TicketDiscount td = TicketDiscount.builder()
                        .ticket(ticket)
                        .discount(discount)
                        .amount(discountValue)
                        .build();
                ticket.getTicketDiscounts().add(td);
            }
        } else if (ticket.getTicketDiscounts() != null && !ticket.getTicketDiscounts().isEmpty()) {
            // ‚úÖ Gi·ªØ discount c≈© nh∆∞ng t√≠nh l·∫°i theo t·ªïng m·ªõi
            discountTotal = BigDecimal.ZERO;
            for (TicketDiscount td : ticket.getTicketDiscounts()) {
                Discount discount = td.getDiscount();
                BigDecimal newDiscountValue = discount.getValue(totalBeforeDiscount);
                td.setAmount(newDiscountValue);
                discountTotal = discountTotal.add(newDiscountValue);
            }
        }


        // ====================== üí∞ 5Ô∏è‚É£ T√≠nh & l∆∞u t·ªïng ti·ªÅn ======================
        BigDecimal total = totalBeforeDiscount.subtract(discountTotal);
        if (total.compareTo(BigDecimal.ZERO) < 0) total = BigDecimal.ZERO;


        ticket.setTotalPrice(total);
        ticketRepository.saveAndFlush(ticket);


        log.info("üí∞ V√© {} c·∫≠p nh·∫≠t th√†nh c√¥ng | Gh·∫ø={} | Combo={} | Gi·∫£m={} | T·ªïng={} | Email={}",
                ticket.getTicketId(), seatTotal, comboTotal, discountTotal, total, ticket.getCustomerEmail());


        return ticketMapper.toResponse(ticket);
    }


    /** ‚úÖ Helper: t·∫°o v√© m·ªõi ƒëang HOLDING */
    private Ticket createNewHoldingTicket(Account account, Showtime showtime, String email) {
        Ticket newTicket = Ticket.builder()
                .account(account)
                .showtime(showtime)
                .ticketStatus(Ticket.TicketStatus.HOLDING)
                .paymentMethod(Ticket.PaymentMethod.CASH)
                .holdUntil(LocalDateTime.now().plusMinutes(5))
                .customerEmail(email)
                .build();
        ensureListNotNull(newTicket);
        ticketRepository.save(newTicket);
        return newTicket;
    }


    /** ‚úÖ ƒê·∫£m b·∫£o list trong v√© kh√¥ng null */
    private void ensureListNotNull(Ticket ticket) {
        if (ticket.getTicketSeats() == null) ticket.setTicketSeats(new ArrayList<>());
        if (ticket.getTicketCombos() == null) ticket.setTicketCombos(new ArrayList<>());
        if (ticket.getTicketDiscounts() == null) ticket.setTicketDiscounts(new ArrayList<>());
    }

    /* üü¢ ƒê·ªïi gh·∫ø khi quay l·∫°i */
    @Transactional
    public TicketResponse replaceSeats(Integer ticketId, List<Integer> newSeatIds) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        // ‚úÖ Ch·ªâ ƒë·ªïi khi v√© c√≤n HOLDING
        if (ticket.getTicketStatus() != Ticket.TicketStatus.HOLDING)
            throw new RuntimeException("Ch·ªâ ƒë∆∞·ª£c ƒë·ªïi gh·∫ø khi v√© ƒëang HOLDING!");


        Showtime showtime = ticket.getShowtime();


        // ‚úÖ L·∫•y danh s√°ch gh·∫ø ƒë√£ b·ªã gi·ªØ ho·∫∑c ƒë·∫∑t, nh∆∞ng lo·∫°i tr·ª´ ch√≠nh v√© hi·ªán t·∫°i
        List<Integer> occupiedSeats = ticketRepository.findOccupiedSeatIdsByShowtimeExcludeTicket(
                showtime.getShowtimeID(), ticket.getTicketId());


        // ‚úÖ X√≥a gh·∫ø c≈© tr∆∞·ªõc khi th√™m m·ªõi
        ticket.getTicketSeats().clear();
        BigDecimal total = BigDecimal.ZERO;


        for (Integer seatId : newSeatIds) {
            if (occupiedSeats.contains(seatId)) {
                throw new RuntimeException("Gh·∫ø " + seatId + " ƒë√£ ƒë∆∞·ª£c gi·ªØ ho·∫∑c ƒë·∫∑t!");
            }


            Seat seat = seatRepository.findById(seatId)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y gh·∫ø ID=" + seatId));


            BigDecimal seatPrice = showtime.getPrice()
                    .multiply(seat.getSeatType().getPriceMultiplier());


            total = total.add(seatPrice);
            ticket.getTicketSeats().add(new TicketSeat(ticket, seat));
        }


        // ‚úÖ Gia h·∫°n th·ªùi gian gi·ªØ v√© th√™m 5 ph√∫t
        ticket.setHoldUntil(LocalDateTime.now().plusMinutes(5));
        ticket.setTotalPrice(total);
        ticketRepository.saveAndFlush(ticket);


        log.info("‚úÖ V√© {} ƒë·ªïi gh·∫ø th√†nh c√¥ng | T·ªïng ti·ªÅn m·ªõi: {} | S·ªë gh·∫ø: {}",
                ticketId, total, newSeatIds.size());


        return ticketMapper.toResponse(ticket);
    }


    private String createOtpForTicket(Ticket ticket) {
        try {
            // ‚úÖ X√≥a OTP c≈© c·ªßa v√© n√†y tr∆∞·ªõc (n·∫øu c√≥)
            List<Otp> existingOtps = otpRepository.findByTicket(ticket);
            if (!existingOtps.isEmpty()) {
                otpRepository.deleteAll(existingOtps);
                otpRepository.flush();
                log.info("üßπ ƒê√£ x√≥a {} OTP c≈© c·ªßa v√© {}", existingOtps.size(), ticket.getTicketId());
            }


            // ‚úÖ Sinh OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
            java.security.SecureRandom random = new java.security.SecureRandom();
            int otpValue = 100000 + random.nextInt(900000); // Random 6 ch·ªØ s·ªë


            // ‚úÖ Th·ªùi gian h·∫øt h·∫°n = khi h·∫øt su·∫•t chi·∫øu
            LocalDateTime expiryTime = ticket.getShowtime().getEndTime();
            if (expiryTime == null) {
                expiryTime = ticket.getShowtime().getStartTime().plusHours(2); // M·∫∑c ƒë·ªãnh +2 gi·ªù
            }


            // ‚úÖ T·∫°o entity OTP
            Otp otp = Otp.builder()
                    .accountID(ticket.getAccount())
                    .ticket(ticket)
                    .code(String.valueOf(otpValue))
                    .expiry(expiryTime)
                    .build();


            // ‚úÖ L∆∞u v√†o DB
            otpRepository.saveAndFlush(otp);


            log.info("üîë ƒê√£ t·∫°o OTP {} cho v√© {} (h·∫øt h·∫°n l√∫c {})",
                    otpValue, ticket.getTicketId(), expiryTime);


            return String.valueOf(otpValue); // ‚úÖ Tr·∫£ v·ªÅ code ƒë·ªÉ g·ª≠i mail


        } catch (Exception e) {
            log.error("‚ùå L·ªói khi t·∫°o OTP cho v√© {}: {}", ticket.getTicketId(), e.getMessage(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o OTP", e);
        }
    }



    @Transactional
    public void cancelTicket(Integer ticketId) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));
        if (ticket.getTicketStatus() == Ticket.TicketStatus.HOLDING)
            ticket.setTicketStatus(Ticket.TicketStatus.CANCELLED);
        else if (ticket.getTicketStatus() == Ticket.TicketStatus.BOOKED)
            ticket.setTicketStatus(Ticket.TicketStatus.CANCEL_REQUESTED);
        ticket.setHoldUntil(null);
        ticketRepository.save(ticket);
    }


    public TicketResponse getTicket(Integer id) {
        return ticketRepository.findById(id)
                .map(ticketMapper::toResponse)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));
    }

    public List<Integer> getHeldSeats(Integer ticketId) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));
        if (ticket.getTicketStatus() != Ticket.TicketStatus.HOLDING)
            throw new RuntimeException("V√© kh√¥ng ·ªü tr·∫°ng th√°i HOLDING!");
        return ticket.getTicketSeats().stream()
                .map(ts -> ts.getSeat().getSeatID())
                .toList();
    }


    @Scheduled(fixedRate = 60000)
    @Transactional
    public void releaseExpiredHolds() {
        List<Ticket> expired = ticketRepository
                .findByTicketStatusAndHoldUntilBefore(Ticket.TicketStatus.HOLDING, LocalDateTime.now());
        if (!expired.isEmpty()) {
            expired.forEach(t -> {
                t.setTicketStatus(Ticket.TicketStatus.CANCELLED);
                t.setHoldUntil(null);
            });
            ticketRepository.saveAll(expired);
        }
    }


    @PersistenceContext
    private EntityManager entityManager;

    @Transactional
    public void addCombosToTicket(Integer ticketId, List<TicketComboRequest> combos) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        // üßπ Xo√° combo c≈© (n·∫øu c√≥)
        List<TicketCombo> oldCombos = ticketComboRepository.findByTicket_TicketId(ticketId);
        if (!oldCombos.isEmpty()) {
            ticketComboRepository.deleteAll(oldCombos);
            ticketComboRepository.flush();
            ticket.getTicketCombos().clear();
            log.info("üßπ ƒê√£ xo√° combo c≈© c·ªßa v√© {}", ticketId);
        }


        BigDecimal comboTotal = BigDecimal.ZERO;


        if (combos != null && !combos.isEmpty()) {
            for (var comboReq : combos) {
                Combo combo = comboRepository.findById(comboReq.getComboId())
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y combo!"));


                BigDecimal subtotal = combo.getPrice()
                        .multiply(BigDecimal.valueOf(comboReq.getQuantity()));
                comboTotal = comboTotal.add(subtotal);


                // ‚úÖ T·∫°o kh√≥a t·ªïng h·ª£p cho TicketCombo
                TicketComboKey key = new TicketComboKey(ticket.getTicketId(), combo.getId());


                TicketCombo tc = TicketCombo.builder()
                        .id(key)              // ‚úÖ d√πng id thay v√¨ ticketId/comboId
                        .ticket(ticket)
                        .combo(combo)
                        .quantity(comboReq.getQuantity())
                        .build();


                ticketComboRepository.save(tc);
            }


            log.info("üçø V√© {} ƒë√£ th√™m {} combo m·ªõi (t·ªïng {}‚Ç´)", ticketId, combos.size(), comboTotal);
        } else {
            log.info("‚ö™ V√© {} kh√¥ng ch·ªçn combo n√†o, comboTotal=0", ticketId);
        }


        // üßæ C·∫≠p nh·∫≠t l·∫°i gi√° combo v√† t·ªïng v√©
        ticket.setComboPrice(comboTotal);


        BigDecimal seatPrice = ticket.getSeatPrice() != null ? ticket.getSeatPrice() : BigDecimal.ZERO;
        ticket.setTotalPrice(seatPrice.add(comboTotal));


        ticketRepository.saveAndFlush(ticket);
        log.info("‚úÖ V√© {} c·∫≠p nh·∫≠t th√†nh c√¥ng, totalPrice={}‚Ç´", ticketId, ticket.getTotalPrice());
    }




    private void saveTicketHistory(Ticket ticket, String oldStatus, String newStatus, Account changer, String note) {
        // ‚ö° N·∫øu changer ch·ªâ c√≥ ID (transient) => fetch entity th·∫≠t
        Account realChanger = null;
        if (changer != null && changer.getAccountID() != null) {
            realChanger = accountRepository.findById(changer.getAccountID()).orElse(null);
        }

        TicketHistory history = TicketHistory.builder()
                .ticket(ticket)
                .oldStatus(oldStatus)
                .newStatus(newStatus)
                .changedBy(realChanger)
                .changedAt(LocalDateTime.now())
                .note(note)
                .build();

        ticketHistoryRepository.save(history);
    }

    @Transactional
    public TicketResponse requestCancel(Integer ticketId, Account requester) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©"));


        Ticket.TicketStatus current = ticket.getTicketStatus();
        if (current != Ticket.TicketStatus.BOOKED)
            throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ g·ª≠i y√™u c·∫ßu h·ªßy khi v√© ƒëang ·ªü tr·∫°ng th√°i 'BOOKED'");


        ticket.setTicketStatus(Ticket.TicketStatus.CANCEL_REQUESTED);
        ticketRepository.save(ticket);


        Account realCustomer = ticket.getAccount();


        saveTicketHistory(ticket,
                current.name(),
                Ticket.TicketStatus.CANCEL_REQUESTED.name(),
                realCustomer,
                "Kh√°ch h√†ng y√™u c·∫ßu h·ªßy v√©");


        return ticketMapper.toResponse(ticket);
    }



    @Transactional
    public TicketResponse approveCancel(Integer ticketId, Account staff) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        Ticket.TicketStatus currentStatus = ticket.getTicketStatus();
        if (currentStatus != Ticket.TicketStatus.CANCEL_REQUESTED)
            throw new RuntimeException("Ch·ªâ ph√™ duy·ªát khi v√© ·ªü tr·∫°ng th√°i 'CANCEL_REQUESTED'");


        // üîπ L∆∞u tr·∫°ng th√°i c≈© v√† c·∫≠p nh·∫≠t m·ªõi
        String oldStatus = currentStatus.name();
        ticket.setTicketStatus(Ticket.TicketStatus.CANCELLED);
        ticketRepository.save(ticket);


        // üîπ Ghi l·∫°i l·ªãch s·ª≠ thay ƒë·ªïi
        saveTicketHistory(ticket, oldStatus, Ticket.TicketStatus.CANCELLED.name(), staff, "Nh√¢n vi√™n duy·ªát h·ªßy v√©");


        log.info("‚úÖ V√© {} ƒë∆∞·ª£c staff {} duy·ªát h·ªßy th√†nh c√¥ng.", ticketId,
                staff != null ? staff.getFullName() : "Unknown");


        return ticketMapper.toResponse(ticket);
    }


    @Transactional
    public TicketResponse approveRefund(Integer ticketId, Account staff) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        Ticket.TicketStatus currentStatus = ticket.getTicketStatus();
        if (currentStatus != Ticket.TicketStatus.CANCELLED)
            throw new RuntimeException("Ch·ªâ ho√†n ti·ªÅn cho v√© ƒë√£ b·ªã h·ªßy (CANCELLED)!");


        // üîπ L∆∞u l·∫°i tr·∫°ng th√°i c≈© v√† c·∫≠p nh·∫≠t m·ªõi
        String oldStatus = currentStatus.name();
        ticket.setTicketStatus(Ticket.TicketStatus.REFUNDED);
        ticketRepository.save(ticket);


        // üîπ Ghi l·ªãch s·ª≠
        saveTicketHistory(ticket, oldStatus, Ticket.TicketStatus.REFUNDED.name(), staff, "Nh√¢n vi√™n x√°c nh·∫≠n ho√†n ti·ªÅn v√©");


        log.info("üí∏ V√© {} ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn b·ªüi nh√¢n vi√™n {}.", ticketId,
                staff != null ? staff.getFullName() : "Unknown");


        return ticketMapper.toResponse(ticket);
    }


    public List<TicketResponse> getPendingCancelTickets(Integer branchId) {
        return ticketRepository.findByBranch(branchId).stream()
                .filter(t -> t.getTicketStatus() == Ticket.TicketStatus.CANCEL_REQUESTED)
                .map(ticketMapper::toResponse)
                .collect(Collectors.toList());
    }

    //CUSTOMER: L·∫•y danh s√°ch v√© c·ªßa ng∆∞·ªùi d√πng
    // CUSTOMER: L·∫•y danh s√°ch v√© c·ªßa ng∆∞·ªùi d√πng
    public List<TicketResponse> getTicketsByAccount(Integer accountID) {
        return ticketRepository.findByAccount_AccountID(accountID).stream()
                .map(ticketMapper::toShortResponse)
                .collect(Collectors.toList());
    }



    // STAFF: L·∫•y danh s√°ch v√© theo chi nh√°nh
    public List<TicketResponse> getTicketsByBranch(Integer branchId) {
        return ticketRepository.findByBranch(branchId).stream()
                .map(ticketMapper::toResponse)
                .collect(Collectors.toList());
    }

    @Transactional
    public TicketResponse updateTicketStatus(Integer ticketId, String newStatus, Account staff) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        Ticket.TicketStatus oldStatus = ticket.getTicketStatus();


        // üîπ Ki·ªÉm tra h·ª£p l·ªá c·ªßa tr·∫°ng th√°i m·ªõi
        Ticket.TicketStatus newEnumStatus;
        try {
            newEnumStatus = Ticket.TicketStatus.valueOf(newStatus.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + newStatus);
        }


        // üîπ C·∫≠p nh·∫≠t v√† l∆∞u v√©
        ticket.setTicketStatus(newEnumStatus);
        ticketRepository.save(ticket);


        // üîπ L∆∞u l·ªãch s·ª≠ thay ƒë·ªïi
        saveTicketHistory(ticket, oldStatus.name(), newEnumStatus.name(), staff, "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªß c√¥ng");


        log.info("üõ†Ô∏è V√© {} ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ {} ‚ûú {} b·ªüi nh√¢n vi√™n {}",
                ticketId, oldStatus, newEnumStatus,
                staff != null ? staff.getFullName() : "Unknown");


        return ticketMapper.toResponse(ticket);
    }


    public TicketDetailResponse getById(Integer id) {
        Ticket ticket = ticketRepository.findWithRelationsByTicketId(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        TicketDetailResponse dto = ticketMapper.toDetailResponse(ticket);


        // ================= üéüÔ∏è Gh·∫ø =================
        String seatNums = (ticket.getTicketSeats() != null && !ticket.getTicketSeats().isEmpty())
                ? ticket.getTicketSeats().stream()
                .map(ts -> ts.getSeat().getSeatRow() + ts.getSeat().getSeatNumber())
                .collect(Collectors.joining(", "))
                : "N/A";
        dto.setSeatNumbers(seatNums);


        // ================= üçø Combo =================
        List<String> comboList = (ticket.getTicketCombos() != null && !ticket.getTicketCombos().isEmpty())
                ? ticket.getTicketCombos().stream()
                .map(tc -> String.format("%s x%d",
                        tc.getCombo().getNameCombo(),
                        tc.getQuantity() != null ? tc.getQuantity() : 1))
                .collect(Collectors.toList())
                : List.of();
        dto.setComboList(comboList);


        // ================= ‚öôÔ∏è Th√¥ng tin b·ªï sung =================
        dto.setTicketStatus(ticket.getTicketStatus().name()); // Enum ‚ûú String
        dto.setTotalPrice(ticket.getTotalPrice() != null
                ? ticket.getTotalPrice().doubleValue()
                : 0.0);
        dto.setPaymentMethod(ticket.getPaymentMethod() != null
                ? ticket.getPaymentMethod().toString()
                : "UNKNOWN");


        return dto;
    }



    public TicketResponse verifyOnlinePayment(Integer ticketId) throws Exception {
        // üîç 1Ô∏è‚É£ L·∫•y v√© t·ª´ DB
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        // ‚ö° 2Ô∏è‚É£ N·∫øu v√© ƒë√£ BOOKED r·ªìi th√¨ b·ªè qua x√°c nh·∫≠n l·∫°i
        if (ticket.getTicketStatus() == Ticket.TicketStatus.BOOKED) {
            log.info("üéüÔ∏è V√© {} ƒë√£ BOOKED r·ªìi ‚Äî b·ªè qua x√°c nh·∫≠n l·∫°i.", ticketId);
            return ticketMapper.toResponse(ticket);
        }


        // ‚ùå N·∫øu v√© b·ªã h·ªßy ho·∫∑c ho√†n ti·ªÅn th√¨ kh√¥ng h·ª£p l·ªá
        if (ticket.getTicketStatus() == Ticket.TicketStatus.CANCELLED
                || ticket.getTicketStatus() == Ticket.TicketStatus.REFUNDED) {
            throw new RuntimeException("V√© n√†y kh√¥ng h·ª£p l·ªá ƒë·ªÉ x√°c nh·∫≠n thanh to√°n!");
        }


        // üß≠ 3Ô∏è‚É£ Ch·ªâ x·ª≠ l√Ω v√© HOLDING
        if (ticket.getTicketStatus() != Ticket.TicketStatus.HOLDING)
            throw new RuntimeException("Ch·ªâ ki·ªÉm tra thanh to√°n cho v√© HOLDING!");


        // üí≥ 4Ô∏è‚É£ Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n
        if (ticket.getPaymentMethod() != Ticket.PaymentMethod.ONLINE)
            throw new RuntimeException("V√© n√†y kh√¥ng thu·ªôc lo·∫°i thanh to√°n online!");


        // üìÑ 5Ô∏è‚É£ T·∫°o m√£ thanh to√°n (VD: CM-123)
        String paymentCode = "CM-" + ticket.getTicketId();


        // üîó 6Ô∏è‚É£ Ki·ªÉm tra Google Sheets (xem c√≥ giao d·ªãch n√†o kh·ªõp kh√¥ng)
        Map<String, String> result = googleSheetsService.findTransactionByCode(paymentCode);
        if (!"true".equals(result.get("found"))) {
            log.warn("‚è≥ Ch∆∞a t√¨m th·∫•y giao d·ªãch cho m√£ {} tr√™n Google Sheets.", paymentCode);
            throw new RuntimeException("Ch∆∞a t√¨m th·∫•y giao d·ªãch cho m√£ " + paymentCode);
        }


        // üí∞ 7Ô∏è‚É£ Ki·ªÉm tra s·ªë ti·ªÅn thanh to√°n
        String amountStr = result.get("amount").replaceAll("[^\\d]", "");
        BigDecimal paidAmount = new BigDecimal(amountStr);
        if (paidAmount.compareTo(ticket.getTotalPrice()) < 0)
            throw new RuntimeException("S·ªë ti·ªÅn ch∆∞a ƒë·ªß (" + paidAmount + " < " + ticket.getTotalPrice() + ")");


        // ‚úÖ 8Ô∏è‚É£ ƒê√°nh d·∫•u thanh to√°n h·ª£p l·ªá
        log.info("‚úÖ ƒê√£ x√°c nh·∫≠n giao d·ªãch h·ª£p l·ªá cho m√£ {} (s·ªë ti·ªÅn {})", paymentCode, paidAmount);


        // üíæ 9Ô∏è‚É£ G·ªçi confirmPayment() ƒë·ªÉ BOOK v√© ch√≠nh th·ª©c (c√≥ g·ª≠i mail & OTP)
        confirmPayment(ticketId, null, null);


        // üßæ üîü Ghi l·∫°i TicketHistory (HOLDING ‚Üí BOOKED)
        saveTicketHistory(ticket,
                Ticket.TicketStatus.HOLDING.name(),
                Ticket.TicketStatus.BOOKED.name(),
                ticket.getAccount(),
                "X√°c nh·∫≠n thanh to√°n online th√†nh c√¥ng qua Google Sheets");


        // üß© 11Ô∏è‚É£ Log & ph·∫£n h·ªìi
        log.info("üéüÔ∏è V√© {} ƒë√£ ƒë∆∞·ª£c BOOKED qua x√°c nh·∫≠n online, t·ªïng ti·ªÅn {}", ticketId, ticket.getTotalPrice());
        return ticketMapper.toResponse(ticket);
    }


    @Transactional
    public void confirmPayment(Integer ticketId) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));

        // ‚ö†Ô∏è B·ªé CHECK N√ÄY ƒêI v√¨ t·ª´ polling c√≥ th·ªÉ ƒë√£ BOOKED r·ªìi
        // if (ticket.getTicketStatus() != Ticket.TicketStatus.HOLDING)
        //     throw new RuntimeException("V√© kh√¥ng ·ªü tr·∫°ng th√°i HOLDING!");

        // ‚úÖ Ki·ªÉm tra n·∫øu v√© ƒë√£ BOOKED th√¨ b·ªè qua
        if (ticket.getTicketStatus() == Ticket.TicketStatus.BOOKED) {
            log.info("‚ÑπÔ∏è V√© {} ƒë√£ BOOKED r·ªìi, kh√¥ng x·ª≠ l√Ω l·∫°i.", ticketId);
            return;
        }

        // ‚úÖ N·∫øu v√© ƒëang HOLDING ‚Üí ti·∫øn h√†nh x√°c nh·∫≠n
        if (ticket.getTicketStatus() == Ticket.TicketStatus.HOLDING) {
            // ‚úÖ L·∫•y danh s√°ch combo ƒë√£ l∆∞u trong DB
            List<TicketComboRequest> combos = ticketComboRepository.findByTicket_TicketId(ticketId)
                    .stream()
                    .map(tc -> new TicketComboRequest(tc.getCombo().getId(), tc.getQuantity()))
                    .collect(Collectors.toList());

            // ‚úÖ G·ªçi h√†m ƒë·∫ßy ƒë·ªß ƒë·ªÉ t√≠nh combo + discount + g·ª≠i mail
            confirmPayment(ticketId, combos, null);
        } else {
            log.warn("‚ö†Ô∏è V√© {} c√≥ tr·∫°ng th√°i {}, kh√¥ng th·ªÉ x√°c nh·∫≠n.", ticketId, ticket.getTicketStatus());
        }
    }

    // ============ GI·ªÆ NGUY√äN method confirmPayment() ƒë·∫ßy ƒë·ªß b√™n d∆∞·ªõi ============
    @Transactional
    public void confirmPayment(Integer ticketId, List<TicketComboRequest> combos, String customEmail) {
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v√©!"));


        // ‚úÖ Load to√†n b·ªô quan h·ªá (gh·∫ø, combo, discount)
        forceLoadRelations(ticket);
        entityManager.refresh(ticket); // ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ applyDiscount


        // ================= ‚öôÔ∏è 1Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i v√© =================
        if (ticket.getTicketStatus() == Ticket.TicketStatus.BOOKED) {
            log.info("‚ÑπÔ∏è V√© {} ƒë√£ BOOKED, g·ª≠i l·∫°i email x√°c nh·∫≠n.", ticketId);
            sendBookingEmail(ticket, combos, customEmail, ticket.getShowtime());
            return;
        }


        if (ticket.getTicketStatus() != Ticket.TicketStatus.HOLDING) {
            log.warn("‚ö†Ô∏è V√© {} kh√¥ng ·ªü tr·∫°ng th√°i HOLDING, b·ªè qua x√°c nh·∫≠n.", ticketId);
            return;
        }


        Showtime showtime = ticket.getShowtime();


        // ================= üçø 2Ô∏è‚É£ C·∫≠p nh·∫≠t combo m·ªõi (n·∫øu c√≥) =================
        if (combos != null) {
            ticketComboRepository.deleteAll(ticketComboRepository.findByTicket_TicketId(ticketId));


            if (!combos.isEmpty()) {
                for (TicketComboRequest comboReq : combos) {
                    Combo combo = comboRepository.findById(comboReq.getComboId())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y combo ID: " + comboReq.getComboId()));


                    TicketCombo tc = TicketCombo.builder()
                            .id(new TicketComboKey(ticket.getTicketId(), combo.getId()))
                            .ticket(ticket)
                            .combo(combo)
                            .quantity(comboReq.getQuantity())
                            .build();


                    ticketComboRepository.save(tc);
                }
                ticketComboRepository.flush();
                log.info("üçø V√© {} ƒë√£ c·∫≠p nh·∫≠t {} combo m·ªõi t·ª´ FE", ticketId, combos.size());
            } else {
                log.info("üçø V√© {} kh√¥ng ch·ªçn combo ‚Üí gi·ªØ tr·ªëng ho√†n to√†n", ticketId);
            }


            // ‚úÖ Reload l·∫°i combos v·ª´a insert (ƒë·ªÉ t√≠nh total ƒë√∫ng)
            ticket.getTicketCombos().clear();
            ticket.getTicketCombos().addAll(ticketComboRepository.findByTicket_TicketId(ticketId));
        }


        // ================= üí∞ 3Ô∏è‚É£ T√≠nh l·∫°i total (seat + combo ‚Äì discount) =================
        BigDecimal seatTotal = ticket.getTicketSeats().stream()
                .map(ts -> ts.getSeat().getSeatType().getPriceMultiplier()
                        .multiply(showtime.getPrice()))
                .reduce(BigDecimal.ZERO, BigDecimal::add);


        BigDecimal comboTotal = ticket.getTicketCombos().stream()
                .map(tc -> tc.getCombo().getPrice()
                        .multiply(BigDecimal.valueOf(tc.getQuantity())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);


        BigDecimal discountTotal = BigDecimal.ZERO;
        if (ticket.getTicketDiscounts() != null && !ticket.getTicketDiscounts().isEmpty()) {
            for (TicketDiscount td : ticket.getTicketDiscounts()) {
                discountTotal = discountTotal.add(td.getAmount());
            }
        }


        BigDecimal totalPaid = seatTotal.add(comboTotal).subtract(discountTotal);
        if (totalPaid.compareTo(BigDecimal.ZERO) < 0) totalPaid = BigDecimal.ZERO;


        ticket.setTotalPrice(totalPaid);


        // ================= üßæ 4Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i v√© =================
        ticket.setTicketStatus(Ticket.TicketStatus.BOOKED);
        ticket.setHoldUntil(null);
        ticketRepository.saveAndFlush(ticket);


        saveTicketHistory(ticket,
                Ticket.TicketStatus.HOLDING.name(),
                Ticket.TicketStatus.BOOKED.name(),
                ticket.getAccount(),
                "Thanh to√°n online th√†nh c√¥ng");


        // ================= üîê 5Ô∏è‚É£ Sinh OTP =================
        String otp = createOtpForTicket(ticket);


        // ================= üèÜ 6Ô∏è‚É£ C·ªông ƒëi·ªÉm Membership =================
        try {
            long points = totalPaid.divide(BigDecimal.valueOf(1000), RoundingMode.DOWN).longValue();
            if (points > 0 && ticket.getAccount() != null) {
                membershipService.updateMembershipAfterPayment(ticket.getAccount(), (int) points);
                log.info("üèÖ C·ªông {} ƒëi·ªÉm cho t√†i kho·∫£n {}", points, ticket.getAccount().getAccountID());
            }
        } catch (Exception ex) {
            log.error("‚ö†Ô∏è L·ªói khi c·ªông ƒëi·ªÉm v√© {}: {}", ticketId, ex.getMessage(), ex);
        }


        // ================= üìß 7Ô∏è‚É£ G·ª≠i email x√°c nh·∫≠n =================
        sendBookingEmail(ticket, combos, customEmail, showtime);


        log.info("‚úÖ V√© {} BOOKED th√†nh c√¥ng | T·ªïng ti·ªÅn {} | Gi·∫£m {} | OTP {}",
                ticketId, totalPaid, discountTotal, otp);
    }






    /** √âp Hibernate load to√†n b·ªô quan h·ªá c·∫ßn thi·∫øt */
    private void forceLoadRelations(Ticket ticket) {
        ticket.getTicketSeats().size();
        ticket.getTicketCombos().size();
        ticket.getTicketDiscounts().size();
    }

    private void sendBookingEmail(Ticket ticket,
                                  List<TicketComboRequest> combos,
                                  String customEmail,
                                  Showtime showtime) {
        try {
            // ‚úÖ T·ªîNG TI·ªÄN TH·∫¨T (ƒë√£ thanh to√°n, ƒë√£ l∆∞u trong DB)
            BigDecimal totalPrice = ticket.getTotalPrice(); // 87,500 VND


            // ‚úÖ T√≠nh t·ªïng ti·ªÅn combo (t·ª´ DB)
            BigDecimal comboTotal = ticket.getTicketCombos().stream()
                    .map(tc -> tc.getCombo().getPrice().multiply(BigDecimal.valueOf(tc.getQuantity())))
                    .reduce(BigDecimal.ZERO, BigDecimal::add);


            // ‚úÖ T√≠nh t·ªïng gi·∫£m gi√° (t·ª´ DB)
            BigDecimal discountTotal = ticket.getTicketDiscounts().stream()
                    .map(TicketDiscount::getAmount)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);


            // ‚úÖ T√≠nh t·ªïng ti·ªÅn gh·∫ø
            BigDecimal seatTotal = ticket.getTicketSeats().stream()
                    .map(ts -> showtime.getPrice().multiply(ts.getSeat().getSeatType().getPriceMultiplier()))
                    .reduce(BigDecimal.ZERO, BigDecimal::add);


            // ‚úÖ Gi√° g·ªëc (ch∆∞a tr·ª´ gi·∫£m gi√°)
            BigDecimal originalPrice = seatTotal.add(comboTotal);


            // ‚úÖ L·∫•y danh s√°ch combo chi ti·∫øt
            List<String> comboDetails = ticket.getTicketCombos().stream()
                    .map(tc -> String.format("%s x%d = %,.0f VND",
                            tc.getCombo().getNameCombo(),
                            tc.getQuantity(),
                            tc.getCombo().getPrice().multiply(BigDecimal.valueOf(tc.getQuantity())).doubleValue()))
                    .collect(Collectors.toList());


            // ‚úÖ L·∫•y t√™n gh·∫ø
            String seatNames = ticket.getTicketSeats().stream()
                    .map(ts -> ts.getSeat().getSeatNumber())
                    .collect(Collectors.joining(", "));


            // ‚úÖ L·∫•y OTP t·ª´ DB (ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi createOtpForTicket)
            String otpCode = getOtpCode(ticket);


            // ‚úÖ L·∫•y QR Code URL
            String qrCodeUrl = getQrCodeUrl(ticket);


            // ‚úÖ ƒê·ªãa ch·ªâ email
            String recipientEmail = customEmail != null && !customEmail.trim().isEmpty()
                    ? customEmail
                    : ticket.getAccount().getEmail();


            // ‚úÖ M√£ v√© (d√πng ticketId)
            String ticketCode = "#" + ticket.getTicketId();


            // ‚úÖ G·ª≠i email
            emailService.sendBookingConfirmationEmail(
                    recipientEmail,
                    ticketCode, // ‚Üê "#166"
                    showtime.getMovie().getTitle(),
                    showtime.getAuditorium().getName(),
                    seatNames,
                    showtime.getStartTime(),
                    comboTotal,
                    originalPrice,
                    discountTotal,
                    totalPrice, // ‚Üê 87,500 VND (GI√Å TH·∫¨T ƒê√É THANH TO√ÅN)
                    showtime.getAuditorium().getBranch().getAddress(),
                    qrCodeUrl,
                    otpCode, // ‚Üê OTP 6 s·ªë ƒë√£ sinh
                    comboDetails
            );


            log.info("üìß ƒê√£ g·ª≠i email x√°c nh·∫≠n v√© {} cho {} (T·ªïng: {} VND, OTP: {})",
                    ticket.getTicketId(), recipientEmail, totalPrice, otpCode);


        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email cho v√© {}: {}", ticket.getTicketId(), e.getMessage(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n", e);
        }
    }
    /**
     * L·∫•y OTP code m·ªõi nh·∫•t t·ª´ DB
     */
    private String getOtpCode(Ticket ticket) {
        List<Otp> otps = otpRepository.findByTicket(ticket);


        if (otps.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y OTP cho v√© {}", ticket.getTicketId());
            return "000000";
        }


        // ‚úÖ L·∫•y OTP m·ªõi nh·∫•t (c√≥ expiry xa nh·∫•t)
        Otp latestOtp = otps.stream()
                .max((o1, o2) -> {
                    if (o1.getExpiry() == null) return -1;
                    if (o2.getExpiry() == null) return 1;
                    return o1.getExpiry().compareTo(o2.getExpiry());
                })
                .orElse(otps.get(0));


        return latestOtp.getCode();
    }


    private String getQrCodeUrl(Ticket ticket) {
        try {
            // ‚úÖ L·∫•y OTP t·ª´ DB
            String otpCode = getOtpCode(ticket);


            // ‚úÖ T·∫°o d·ªØ li·ªáu QR: ticketId + OTP
            String qrData = String.format("TICKET_ID:%d|OTP:%s",
                    ticket.getTicketId(),
                    otpCode);


            // ‚úÖ Encode URL
            String encodedData = java.net.URLEncoder.encode(qrData, java.nio.charset.StandardCharsets.UTF_8);


            // ‚úÖ T·∫°o QR code URL (d√πng API mi·ªÖn ph√≠)
            String qrUrl = "https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=" + encodedData;


            log.info("üî≤ QR Code URL cho v√© {}: {}", ticket.getTicketId(), qrUrl);
            return qrUrl;


        } catch (Exception e) {
            log.error("‚ùå L·ªói t·∫°o QR code cho v√© {}: {}", ticket.getTicketId(), e.getMessage(), e);
            return ""; // Tr·∫£ v·ªÅ empty n·∫øu l·ªói
        }
    }



}
