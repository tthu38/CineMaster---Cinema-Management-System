package com.example.cinemaster.service;

import com.example.cinemaster.configuration.ChatSessionHistory;
import com.example.cinemaster.dto.response.BranchResponse;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.regex.Pattern;

@Service
public class IntentRouterService {

    private final BranchService branchService;
    private final ChatSessionHistory sessionHistory;

    public IntentRouterService(BranchService branchService, ChatSessionHistory sessionHistory) {
        this.branchService = branchService;
        this.sessionHistory = sessionHistory;
    }

    public enum ChatIntent {
        BRANCH_INFO, AUDITORIUM_INFO, SCREENING_NOW, SCREENING_SOON,
        SCREENING_DETAIL, GENERAL_INFO, MOVIE_DETAIL,
        FAQ_OR_POLICY,COMBO_INFO, PROMOTION_INFO,MEMBERSHIP_INFO,NEWS_INFO, // Ch√≠nh s√°ch, gi√° v√©, ho√†n ti·ªÅn
        UNKNOWN
    }

    public ChatIntent determineIntent(String input) {
        if (input == null || input.isBlank()) return ChatIntent.UNKNOWN;
        String normalizedInput = input.toLowerCase().trim();

        // üïí Regex m·ªëc th·ªùi gian th√¥ng d·ª•ng
        boolean hasTimeReference = Pattern.compile(
                "(h√¥m nay|t·ªëi nay|s√°ng nay|chi·ªÅu nay|ng√†y mai|t·ªëi mai|cu·ªëi tu·∫ßn|tu·∫ßn n√†y|tu·∫ßn sau)"
        ).matcher(normalizedInput).find();

        // üé¨ Su·∫•t chi·∫øu / l·ªãch chi·∫øu
        if (normalizedInput.matches(".*(su·∫•t chi·∫øu|l·ªãch chi·∫øu|gi·ªù chi·∫øu|chi·∫øu l√∫c m·∫•y gi·ªù|su·∫•t phim).*"))
            return ChatIntent.SCREENING_DETAIL;

        // üîÆ Phim s·∫Øp chi·∫øu
        if (normalizedInput.matches(".*(phim s·∫Øp chi·∫øu|phim s·∫Øp ra|phim m·ªõi|chu·∫©n b·ªã chi·∫øu).*"))
            return ChatIntent.SCREENING_SOON;

        // üé• Phim ƒëang chi·∫øu (c√≥ th·ªÉ k√®m m·ªëc th·ªùi gian nh∆∞ "t·ªëi nay")
        if (normalizedInput.matches(".*(phim ƒëang chi·∫øu|ƒëang c√≥ phim|phim n√†o ƒëang|ƒëang c√¥ng chi·∫øu).*") || hasTimeReference)
            return ChatIntent.SCREENING_NOW;

        // üè¢ Ph√≤ng chi·∫øu / r·∫°p
        if (normalizedInput.matches(".*(ph√≤ng chi·∫øu|ph√≤ng n√†o|r·∫°p n√†o|ph√≤ng vip|imax|4dx).*"))
            return ChatIntent.AUDITORIUM_INFO;

        // üè¨ Chi nh√°nh / ƒë·ªãa ch·ªâ
        if (normalizedInput.matches(".*(chi nh√°nh|ƒë·ªãa ch·ªâ|·ªü ƒë√¢u|v·ªã tr√≠|c∆° s·ªü|r·∫°p t·∫°i).*"))
            return ChatIntent.BRANCH_INFO;

        // üëã C√¢u ch√†o, l√†m quen
        if (normalizedInput.matches(".*(xin ch√†o|hello|hi|b·∫°n l√† ai|tr·ª£ l√Ω|h·ªó tr·ª£).*"))
            return ChatIntent.GENERAL_INFO;

        // üìú Ch√≠nh s√°ch, ƒë·ªïi v√©, ho√†n ti·ªÅn, khuy·∫øn m√£i, m√£ gi·∫£m, combo
        if (normalizedInput.matches(".*(ch√≠nh s√°ch|ƒë·ªïi v√©|ƒë·ªïi tr·∫£|ho√†n ti·ªÅn|refund|m√£ gi·∫£m|voucher|gi·∫£m gi√°|∆∞u ƒë√£i|khuy·∫øn m√£i|promotion|ƒëi·ªÉm th∆∞·ªüng|th·∫ª th√†nh vi√™n).*"))
            return ChatIntent.FAQ_OR_POLICY;

        // üéûÔ∏è Chi ti·∫øt phim (di·ªÖn vi√™n, ƒë·∫°o di·ªÖn, th·ªÉ lo·∫°i, th·ªùi l∆∞·ª£ng, m√¥ t·∫£)
        if (normalizedInput.matches(".*(di·ªÖn vi√™n|ƒë·∫°o di·ªÖn|th·ªÉ lo·∫°i|bao nhi√™u ph√∫t|th·ªùi l∆∞·ª£ng|t√≥m t·∫Øt|m√¥ t·∫£|review|ƒë√°nh gi√°).*"))
            return ChatIntent.MOVIE_DETAIL;

        if (normalizedInput.contains("combo") || normalizedInput.contains("b·∫Øp") ||
                normalizedInput.contains("n∆∞·ªõc") || normalizedInput.contains("ƒë·ªì ƒÉn")) {
            return ChatIntent.COMBO_INFO;
        }

        if (normalizedInput.contains("khuy·∫øn m√£i") || normalizedInput.contains("∆∞u ƒë√£i") ||
                normalizedInput.contains("gi·∫£m gi√°") || normalizedInput.contains("voucher")) {
            return ChatIntent.PROMOTION_INFO;
        }
        if (normalizedInput.matches(".*(h·∫°n th·∫ª|c·∫•p b·∫≠c|th√†nh vi√™n|level|h·∫°ng|ƒëi·ªÉm th∆∞·ªüng|∆∞u ƒë√£i th√†nh vi√™n).*"))
            return ChatIntent.MEMBERSHIP_INFO;
        if (normalizedInput.matches(".*(tin t·ª©c|news|s·ª± ki·ªán|khuy·∫øn m√£i m·ªõi|b√†i vi·∫øt|blog|th√¥ng b√°o|ra m·∫Øt phim).*"))
            return ChatIntent.NEWS_INFO;

        return ChatIntent.UNKNOWN;
    }

    /**
     * X√°c ƒë·ªãnh chi nh√°nh ng∆∞·ªùi d√πng ƒëang h·ªèi d·ª±a v√†o n·ªôi dung ho·∫∑c session.
     */
    public Optional<BranchResponse> findTargetBranch(String userInput) {
        List<BranchResponse> allBranches = branchService.getAllActiveBranches();
        String normalizedInput = userInput.toLowerCase().trim();

        // B∆∞·ªõc 1: Ki·ªÉm tra xem input c√≥ ch·ª©a t√™n chi nh√°nh
        for (BranchResponse branch : allBranches) {
            if (normalizedInput.contains(branch.getBranchName().toLowerCase())) {
                sessionHistory.setSessionContext("target_branch", branch.getBranchName());
                return Optional.of(branch);
            }
        }

        // B∆∞·ªõc 2: M·ªôt s·ªë synonym ph·ªï bi·∫øn cho th√†nh ph·ªë
        if (normalizedInput.contains("h√† n·ªôi") || normalizedInput.contains("hn")) {
            return allBranches.stream().filter(b -> b.getBranchName().toLowerCase().contains("hanoi")).findFirst();
        }
        if (normalizedInput.contains("h·ªì ch√≠ minh") || normalizedInput.contains("s√†i g√≤n") || normalizedInput.contains("sg") || normalizedInput.contains("hcm")) {
            return allBranches.stream().filter(b -> b.getBranchName().toLowerCase().contains("hcm")).findFirst();
        }
        if (normalizedInput.contains("ƒë√† n·∫µng") || normalizedInput.contains("dn")) {
            return allBranches.stream().filter(b -> b.getBranchName().toLowerCase().contains("da nang") || b.getBranchName().toLowerCase().contains("dn")).findFirst();
        }


        // B∆∞·ªõc 3: N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ l·∫•y t·ª´ session c≈©
        String storedBranch = sessionHistory.getSessionContext("target_branch");
        if (storedBranch != null) {
            return allBranches.stream()
                    .filter(b -> b.getBranchName().equalsIgnoreCase(storedBranch))
                    .findFirst();
        }

        return Optional.empty();
    }


}
