package com.example.cinemaster.service;

import com.example.cinemaster.dto.request.ShowtimeCreateRequest;
import com.example.cinemaster.dto.request.ShowtimeUpdateRequest;
import com.example.cinemaster.dto.response.DayScheduleResponse;
import com.example.cinemaster.dto.response.ShowtimeResponse;
import com.example.cinemaster.entity.Auditorium;
import com.example.cinemaster.entity.ScreeningPeriod;
import com.example.cinemaster.entity.Seat;
import com.example.cinemaster.entity.Showtime;
import com.example.cinemaster.mapper.ShowtimeMapper;
import com.example.cinemaster.repository.AuditoriumRepository;
import com.example.cinemaster.repository.ScreeningPeriodRepository;
import com.example.cinemaster.repository.SeatRepository;
import com.example.cinemaster.repository.ShowtimeRepository;
import com.example.cinemaster.security.AccountPrincipal;
import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.*;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.time.*;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ShowtimeService {

    private final ShowtimeRepository showtimeRepo;
    private final ScreeningPeriodRepository periodRepo;
    private final AuditoriumRepository auditoriumRepo;
    private final SeatRepository seatRepository;
    private final ShowtimeMapper mapper;


    private static final int CLEANUP_MINUTES = 15;

    /* ============================================================
       üü¶ L·∫§Y CHI TI·∫æT / T√åM KI·∫æM SU·∫§T CHI·∫æU
    ============================================================ */

    public ShowtimeResponse getById(Integer id) {
        var s = showtimeRepo.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Showtime not found"));
        return mapper.toResponse(s);
    }

    public Page<ShowtimeResponse> search(Integer periodId, Integer auditoriumId,
                                         LocalDateTime from, LocalDateTime to,
                                         Pageable pageable) {

        Specification<Showtime> spec = (root, query, cb) -> cb.conjunction();

        if (periodId != null)
            spec = spec.and((r, q, cb) -> cb.equal(r.get("period").get("periodID"), periodId));

        if (auditoriumId != null)
            spec = spec.and((r, q, cb) -> cb.equal(r.get("auditorium").get("auditoriumID"), auditoriumId));

        if (from != null)
            spec = spec.and((r, q, cb) -> cb.greaterThanOrEqualTo(r.get("startTime"), from));

        if (to != null)
            spec = spec.and((r, q, cb) -> cb.lessThan(r.get("startTime"), to));

        return showtimeRepo.findAll(spec, pageable).map(mapper::toResponse);
    }

    /* ============================================================
       üü© T·∫†O / C·∫¨P NH·∫¨T / XO√Å
    ============================================================ */

    @Transactional
    public ShowtimeResponse create(ShowtimeCreateRequest req, AccountPrincipal user) {
        var period = periodRepo.findById(req.periodId())
                .orElseThrow(() -> new EntityNotFoundException("ScreeningPeriod not found"));
        var auditorium = auditoriumRepo.findById(req.auditoriumId())
                .orElseThrow(() -> new EntityNotFoundException("Auditorium not found"));

        LocalDateTime start = req.startTime();
        LocalDateTime end = req.endTime();

        // ‚úÖ N·∫øu end nh·ªè h∆°n start (qua 0h) th√¨ c·ªông th√™m 1 ng√†y
        if (end.isBefore(start)) {
            end = end.plusDays(1);
            System.out.println("‚è© Auto-adjust endTime sang ng√†y h√¥m sau: " + end);
        }

        validateShowtime(start, end, period, auditorium, null);

        var entity = mapper.toEntity(req, period, auditorium);
        entity.setStartTime(start);
        entity.setEndTime(end);

        showtimeRepo.saveAndFlush(entity);
        return mapper.toResponse(entity);
    }


    @Transactional
    public ShowtimeResponse update(Integer id, ShowtimeUpdateRequest req, AccountPrincipal user) {
        var entity = showtimeRepo.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Showtime not found"));

        var period = periodRepo.findById(req.periodId())
                .orElseThrow(() -> new EntityNotFoundException("ScreeningPeriod not found"));
        var auditorium = auditoriumRepo.findById(req.auditoriumId())
                .orElseThrow(() -> new EntityNotFoundException("Auditorium not found"));

        // üîí Manager ch·ªâ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong chi nh√°nh c·ªßa m√¨nh
        if (user != null && user.isManager()) {
            Integer managerBranch = user.getBranchId();
            Integer auditoriumBranch = auditorium.getBranch().getId();

            if (managerBranch == null || !Objects.equals(managerBranch, auditoriumBranch)) {
                throw new SecurityException("Manager kh√¥ng th·ªÉ c·∫≠p nh·∫≠t showtime ngo√†i chi nh√°nh c·ªßa m√¨nh");
            }
        }

        // üïê X·ª≠ l√Ω th·ªùi gian b·∫Øt ƒë·∫ßu / k·∫øt th√∫c
        LocalDateTime start = req.startTime();
        LocalDateTime end = req.endTime();

        // ‚úÖ N·∫øu gi·ªù k·∫øt th√∫c nh·ªè h∆°n gi·ªù b·∫Øt ƒë·∫ßu ‚Üí qua ng√†y h√¥m sau
        if (end.isBefore(start)) {
            end = end.plusDays(1);
            System.out.println("‚è© Auto-adjust endTime sang ng√†y h√¥m sau: " + end);
        }

        // ‚úÖ Ki·ªÉm tra tr√πng gi·ªù, gi·ªõi h·∫°n ng√†y chi·∫øu, branch, v.v.
        validateShowtime(start, end, period, auditorium, id);

        // ‚úÖ C·∫≠p nh·∫≠t entity
        mapper.updateEntityFromRequest(req, entity, period, auditorium);
        entity.setStartTime(start);
        entity.setEndTime(end);

        showtimeRepo.saveAndFlush(entity);
        return mapper.toResponse(entity);
    }


    @Transactional
    public void delete(Integer id, AccountPrincipal user) {
        var entity = showtimeRepo.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Showtime not found"));

        if (user != null && user.isManager()) {
            Integer managerBranch = user.getBranchId();
            Integer showtimeBranch = entity.getAuditorium().getBranch().getId();
            if (managerBranch == null || !Objects.equals(managerBranch, showtimeBranch)) {
                throw new SecurityException("Manager kh√¥ng th·ªÉ x√≥a showtime c·ªßa chi nh√°nh kh√°c");
            }
        }

        showtimeRepo.delete(entity);
    }

    /* ============================================================
       üß© VALIDATION
    ============================================================ */

    private void validateShowtime(LocalDateTime start, LocalDateTime end,
                                  ScreeningPeriod period, Auditorium auditorium,
                                  Integer excludeId) {

        System.out.println("\n========== VALIDATE SHOWTIME ==========");
        System.out.println("üé¨ Movie: " + period.getMovie().getTitle());
        System.out.println("üèõÔ∏è Auditorium: " + auditorium.getName());
        System.out.println("Start: " + start);
        System.out.println("End:   " + end);

        // üïõ N·∫øu endTime nh·ªè h∆°n startTime => qua ng√†y h√¥m sau
        if (end.isBefore(start)) {
            end = end.plusDays(1);
            System.out.println("‚è© EndTime nh·ªè h∆°n StartTime ‚Üí t·ª± ƒë·ªông +1 ng√†y");
        }

        // üè¢ Ki·ªÉm tra chi nh√°nh ƒë·ªìng b·ªô
        if (!Objects.equals(period.getBranch().getId(), auditorium.getBranch().getId())) {
            throw new IllegalArgumentException("‚ùå Auditorium kh√¥ng thu·ªôc c√πng chi nh√°nh v·ªõi ScreeningPeriod");
        }

        // üïê End ph·∫£i sau Start
        if (!end.isAfter(start)) {
            throw new IllegalArgumentException("‚ùå EndTime ph·∫£i l·ªõn h∆°n StartTime");
        }

        // üìÖ Ki·ªÉm tra ng√†y chi·∫øu n·∫±m trong kho·∫£ng chi·∫øu
        LocalDate startDate = period.getStartDate();
        LocalDate endDate = period.getEndDate();
        LocalDate showDate = start.toLocalDate();

        if (showDate.isBefore(startDate) || showDate.isAfter(endDate)) {
            throw new IllegalArgumentException(String.format(
                    "‚ùå Ng√†y chi·∫øu (%s) ph·∫£i n·∫±m trong kho·∫£ng chi·∫øu c·ªßa phim: %s ‚Üí %s",
                    showDate, startDate, endDate
            ));
        }

        // üïì N·∫øu phim chi·∫øu qua 0h (v√≠ d·ª• 23:30 ‚Üí 01:45), th√¨ ph·∫ßn k·∫øt th√∫c ph·∫£i <= endDate + 1 ng√†y
        if (end.toLocalDate().isAfter(endDate.plusDays(1))) {
            throw new IllegalArgumentException(String.format(
                    "‚ùå Su·∫•t chi·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n cu·ªëi c·ªßa kho·∫£ng chi·∫øu (%s ‚Üí %s)",
                    startDate, endDate
            ));
        }

        // üßπ Th√™m buffer 15 ph√∫t ƒë·ªÉ tr√°nh ch·ªìng su·∫•t
        LocalDateTime startBuf = start.minusMinutes(CLEANUP_MINUTES);
        LocalDateTime endBuf = end.plusMinutes(CLEANUP_MINUTES);

        // üîç Ki·ªÉm tra tr√πng khung gi·ªù trong c√πng ph√≤ng
        long roomClash = (excludeId == null)
                ? showtimeRepo.countOverlaps(auditorium.getAuditoriumID(), startBuf, endBuf)
                : showtimeRepo.countOverlapsExcluding(auditorium.getAuditoriumID(), startBuf, endBuf, excludeId);

        if (roomClash > 0) {
            throw new IllegalStateException("‚ùå Khung gi·ªù vi ph·∫°m kho·∫£ng ƒë·ªám 15 ph√∫t trong c√πng ph√≤ng chi·∫øu");
        }

        // üéûÔ∏è Ki·ªÉm tra c√πng phim tr√πng gi·ªù trong c√πng ph√≤ng/chi nh√°nh
        var movieId = period.getMovie().getMovieID();
        var branchId = auditorium.getBranch().getId();
        var auditoriumId = auditorium.getAuditoriumID();

        long movieClash = (excludeId == null)
                ? showtimeRepo.countMovieOverlapInBranch(movieId, branchId, auditoriumId, start, end)
                : showtimeRepo.countMovieOverlapInBranchExcluding(movieId, branchId, auditoriumId, start, end, excludeId);

        if (movieClash > 0) {
            throw new IllegalStateException("‚ùå Phim n√†y ƒë√£ c√≥ su·∫•t chi·∫øu kh√°c trong c√πng ph√≤ng ·ªü khung gi·ªù tr√πng");
        }

        System.out.println("‚úÖ Showtime h·ª£p l·ªá!");
    }


    /* ============================================================
       üìÖ L·ªäCH CHI·∫æU THEO TU·∫¶N
    ============================================================ */

    public List<DayScheduleResponse> getNextWeekSchedule(Integer branchId) {
        LocalDate today = LocalDate.now();
        LocalDate nextMonday = today.plusDays((8 - today.getDayOfWeek().getValue()) % 7);
        return buildWeek(nextMonday, branchId);
    }

    public List<DayScheduleResponse> getWeekSchedule(LocalDate anchor, Integer branchId) {
        LocalDate base = (anchor != null) ? anchor : LocalDate.now();
        LocalDate monday = base.minusDays((base.getDayOfWeek().getValue() + 6) % 7);
        return buildWeek(monday, branchId);
    }

    /* ============================================================
       üßÆ BUILD WEEK LOGIC
    ============================================================ */

    private List<DayScheduleResponse> buildWeek(LocalDate monday, Integer branchId) {
        LocalDate sunday = monday.plusDays(7);
        LocalDateTime from = monday.atStartOfDay();
        LocalDateTime to = sunday.atStartOfDay();

        List<Showtime> list = (branchId == null)
                ? showtimeRepo.findAllByStartTimeGreaterThanEqualAndStartTimeLessThan(from, to)
                : showtimeRepo.findWeekByBranch(from, to, branchId);

        Map<LocalDate, Map<Integer, List<Showtime>>> grouped = list.stream()
                .collect(Collectors.groupingBy(
                        s -> s.getStartTime().toLocalDate(),
                        Collectors.groupingBy(s -> s.getPeriod().getMovie().getMovieID())
                ));

        List<DayScheduleResponse> days = new ArrayList<>();
        for (int i = 0; i < 7; i++) {
            LocalDate d = monday.plusDays(i);
            Map<Integer, List<Showtime>> byMovie = grouped.getOrDefault(d, Collections.emptyMap());

            List<DayScheduleResponse.MovieSlots> movies = byMovie.entrySet().stream().map(e -> {
                Integer movieId = e.getKey();
                List<Showtime> slots = e.getValue().stream()
                        .sorted(Comparator.comparing(Showtime::getStartTime))
                        .toList();

                String title = slots.get(0).getPeriod().getMovie().getTitle();
                String poster = slots.get(0).getPeriod().getMovie().getPosterUrl();

                List<DayScheduleResponse.SlotItem> slotItems = slots.stream().map(s -> {
                    var auditorium = s.getAuditorium();
                    int auditoriumId = auditorium.getAuditoriumID();

                    // ‚úÖ L·∫•y danh s√°ch gh·∫ø an to√†n
                    List<Seat> seats = seatRepository.findByAuditorium_AuditoriumID(auditoriumId);

                    int totalSeats = seats.size();
                    long availableSeats = seats.stream()
                            .filter(seat -> seat.getStatus() != null && seat.getStatus().equals(Seat.SeatStatus.AVAILABLE))
                            .count();

                    return new DayScheduleResponse.SlotItem(
                            s.getShowtimeID(),
                            auditoriumId,
                            auditorium.getName(),
                            s.getStartTime(),
                            s.getEndTime(),
                            (int) availableSeats,
                            totalSeats
                    );
                }).toList();



                return new DayScheduleResponse.MovieSlots(movieId, title, poster, slotItems);
            }).sorted(Comparator.comparing(DayScheduleResponse.MovieSlots::movieTitle)).toList();

            days.add(new DayScheduleResponse(d, movies));
        }
        return days;
    }
}
