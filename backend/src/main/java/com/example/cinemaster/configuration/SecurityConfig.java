package com.example.cinemaster.configuration;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtFilter;

    // ‚úÖ Danh s√°ch endpoint c√¥ng khai (kh√¥ng y√™u c·∫ßu x√°c th·ª±c)
    private static final String[] PUBLIC_ENDPOINTS = {
            "/api/v1/auth/**",
            "/api/v1/password/**",
            "/api/v1/chat/**",
            "/uploads/**",
            "/api/v1/merchant/**",
            "/api/v1/vnpay/**",
            "/api/v1/momo/**",
            "/api/v1/sepay/**",
            "/api/v1/payments/**"
    };

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                // üîì Cho ph√©p CORS
                .cors(cors -> cors.configurationSource(corsConfigurationSource()))
                // üîí T·∫Øt CSRF (v√¨ s·ª≠ d·ª•ng JWT)
                .csrf(csrf -> csrf.disable())
                // üî• Gi·ªØ context t·ª± ƒë·ªông, kh√¥ng c·∫ßn l∆∞u tay
                .securityContext(context -> context.requireExplicitSave(false))
                .requestCache(cache -> cache.disable())
                // ‚öôÔ∏è C·∫•u h√¨nh quy·ªÅn truy c·∫≠p
                .authorizeHttpRequests(auth -> auth
                        // Cho ph√©p g·ªçi OPTIONS (d√†nh cho preflight request)
                        .requestMatchers(HttpMethod.OPTIONS).permitAll()

                        // ‚úÖ C√°c endpoint c√¥ng khai
                        .requestMatchers(PUBLIC_ENDPOINTS).permitAll()

                        // ‚úÖ Cho ph√©p t·∫•t c·∫£ request GET public (nh∆∞ movie list, showtime, news,...)
                        .requestMatchers(HttpMethod.GET, "/api/v1/**").permitAll()

                        // ‚úÖ Cho ph√©p g·ª≠i form li√™n h·ªá (Contact)
                        .requestMatchers(HttpMethod.POST, "/api/v1/contacts/**").permitAll()

                        // ‚úÖ Cho ph√©p tƒÉng l∆∞·ª£t xem tin t·ª©c (PUT /news/{id}/view)
                        .requestMatchers(HttpMethod.PUT, "/api/v1/news/*/view").permitAll()

                        // ‚úÖ C√°c API kh√°c ph·∫£i x√°c th·ª±c
                        .anyRequest().authenticated()
                )
                // üîê Th√™m JWT filter v√†o tr∆∞·ªõc UsernamePasswordAuthenticationFilter
                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOriginPatterns(List.of("*"));
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"));
        config.setAllowedHeaders(List.of("Authorization", "Content-Type", "Accept", "Origin"));
        config.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    // üîê M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng BCrypt
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
