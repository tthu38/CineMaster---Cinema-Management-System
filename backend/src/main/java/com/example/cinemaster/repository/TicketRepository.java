package com.example.cinemaster.repository;

import com.example.cinemaster.entity.Account;
import com.example.cinemaster.entity.Ticket;
import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface TicketRepository extends JpaRepository<Ticket, Integer> {


    /* ======================================================
       üîπ Danh s√°ch gh·∫ø ƒë√£ ƒë∆∞·ª£c BOOKED ho·∫∑c HOLDING (ch∆∞a h·∫øt h·∫°n)
    ====================================================== */
    @Query("""
    SELECT ts.seat.seatID
    FROM TicketSeat ts
    WHERE ts.ticket.showtime.showtimeID = :showtimeId
      AND (
          ts.ticket.ticketStatus = com.example.cinemaster.entity.Ticket.TicketStatus.BOOKED
          OR (ts.ticket.ticketStatus = com.example.cinemaster.entity.Ticket.TicketStatus.HOLDING
              AND ts.ticket.holdUntil > CURRENT_TIMESTAMP)
      )
""")
    List<Integer> findOccupiedSeatIdsByShowtime(@Param("showtimeId") Integer showtimeId);


    /* ======================================================
       üîπ Danh s√°ch gh·∫ø ƒë√£ BOOKED (d√πng cho th·ªëng k√™ ho·∫∑c check)
    ====================================================== */
    @Query("""
        SELECT ts.seat.seatID
        FROM TicketSeat ts
        WHERE ts.ticket.showtime.showtimeID = :showtimeId
          AND ts.ticket.ticketStatus = 'BOOKED'
    """)
    List<Integer> findBookedSeatIdsByShowtime(@Param("showtimeId") Integer showtimeId);

    /* ======================================================
       üîπ L·∫•y danh s√°ch v√© HOLDING ƒë√£ h·∫øt h·∫°n
    ====================================================== */
    List<Ticket> findByTicketStatusAndHoldUntilBefore(
            Ticket.TicketStatus status, LocalDateTime time);

    /* ======================================================
       üîπ L·∫•y danh s√°ch v√© theo t√†i kho·∫£n (d√πng cho trang ‚ÄúV√© c·ªßa t√¥i‚Äù)
    ====================================================== */
    List<Ticket> findByAccount_AccountID(Integer accountId);

    List<Ticket> findByAccount_AccountIDAndTicketStatus(Integer accountId, Ticket.TicketStatus status);

    /* ======================================================
       üîπ L·∫•y v√© c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin Account + Showtime (d√†nh cho chi ti·∫øt v√©)
    ====================================================== */
    @Query("""
SELECT t FROM Ticket t
JOIN FETCH t.account a
LEFT JOIN FETCH t.showtime s
WHERE t.ticketId = :id
""")
    Optional<Ticket> findWithAccountByTicketId(@Param("id") Integer id);

    /* ======================================================
       üîπ L·∫•y v√© m·ªõi nh·∫•t theo Account
    ====================================================== */
    Optional<Ticket> findTopByAccountOrderByBookingTimeDesc(Account account);


    /* ======================================================
       üîπ EntityGraph: Load ƒë·∫ßy ƒë·ªß quan h·ªá cho v√©
    ====================================================== */
    @EntityGraph(attributePaths = {
            "showtime",
            "showtime.period",
            "showtime.period.movie",
            "showtime.period.branch",
            "showtime.auditorium"
    })
    Optional<Ticket> findWithRelationsByTicketId(Integer ticketID);

    /* ======================================================
       üîπ STAFF: L·∫•y danh s√°ch v√© theo chi nh√°nh
    ====================================================== */
    @Query("SELECT t FROM Ticket t " +
            "JOIN t.showtime s " +
            "JOIN s.period p " +
            "JOIN p.branch b " +
            "WHERE b.id = :branchId")
    List<Ticket> findByBranch(@Param("branchId") Integer branchId);


    /* ======================================================
       üîπ B·ªî SUNG T·ª™ FILE D∆Ø·ªöI (ƒê√É S·ª¨A account.id ‚Üí account.accountID)
    ====================================================== */

    // üîπ L·∫•y t·∫•t c·∫£ v√© b√°n b·ªüi nh√¢n vi√™n trong kho·∫£ng th·ªùi gian
    @Query("""
        SELECT t FROM Ticket t
        WHERE t.account.accountID = :staffId
          AND t.ticketStatus = 'Booked'
          AND t.bookingTime BETWEEN :from AND :to
    """)
    List<Ticket> findAllByStaffAndTimeRange(@Param("staffId") Integer staffId,
                                            @Param("from") LocalDateTime from,
                                            @Param("to") LocalDateTime to);

    // üîπ T·ªïng doanh thu theo ph∆∞∆°ng th·ª©c thanh to√°n
    @Query("""
        SELECT COALESCE(SUM(t.totalPrice), 0)
        FROM Ticket t
        WHERE t.account.accountID = :staffId
          AND t.paymentMethod = :method
          AND t.ticketStatus = 'Booked'
          AND t.bookingTime BETWEEN :from AND :to
    """)
    BigDecimal sumRevenueByPaymentMethod(@Param("staffId") Integer staffId,
                                         @Param("from") LocalDateTime from,
                                         @Param("to") LocalDateTime to,
                                         @Param("method") String method);

    // üîπ T·ªïng doanh thu ngo·∫°i tr·ª´ m·ªôt ph∆∞∆°ng th·ª©c (VD: kh√¥ng t√≠nh CASH)
    @Query("""
        SELECT COALESCE(SUM(t.totalPrice), 0)
        FROM Ticket t
        WHERE t.account.accountID = :staffId
          AND t.paymentMethod <> :method
          AND t.ticketStatus = 'Booked'
          AND t.bookingTime BETWEEN :from AND :to
    """)
    BigDecimal sumRevenueExceptPaymentMethod(@Param("staffId") Integer staffId,
                                             @Param("from") LocalDateTime from,
                                             @Param("to") LocalDateTime to,
                                             @Param("method") String method);
}
