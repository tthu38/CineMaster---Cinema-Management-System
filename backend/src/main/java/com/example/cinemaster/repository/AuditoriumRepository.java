package com.example.cinemaster.repository;

import com.example.cinemaster.entity.Auditorium;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface AuditoriumRepository extends JpaRepository<Auditorium, Integer> {
    // 1. T√¨m t·∫•t c·∫£ c√°c ph√≤ng chi·∫øu C√íN HO·∫†T ƒê·ªòNG
    List<Auditorium> findByIsActiveTrue();

    // 2. T√¨m ph√≤ng chi·∫øu theo Branch ID v√† C√íN HO·∫†T ƒê·ªòNG
    List<Auditorium> findByBranch_IdAndIsActiveTrue(Integer branchId);

    // 3. T√¨m ph√≤ng chi·∫øu theo ID, CH·ªà n·∫øu n√≥ C√íN HO·∫†T ƒê·ªòNG
    Optional<Auditorium> findByAuditoriumIDAndIsActiveTrue(Integer id);

    // Ph∆∞∆°ng th·ª©c c≈© (gi·ªØ l·∫°i)
    List<Auditorium> findByBranch_Id(Integer branchId);

    @Modifying
    // üî• S·ª≠a th√†nh a.branch.id (thu·ªôc t√≠nh branch trong Auditorium -> thu·ªôc t√≠nh id trong Branch)
    @Query("UPDATE Auditorium a SET a.isActive = :isActive WHERE a.branch.id = :branchId")
    int updateIsActiveStatusByBranchId(
            @Param("branchId") Integer branchId, // D√πng Integer ƒë·ªÉ kh·ªõp v·ªõi Branch.id
            @Param("isActive") boolean isActive
    );
}
