package com.example.cinemaster.controller;

import com.example.cinemaster.dto.response.TicketDetailResponse;
import com.example.cinemaster.dto.response.TicketResponse;
import com.example.cinemaster.dto.response.ApiResponse;
import com.example.cinemaster.entity.Account;
import com.example.cinemaster.service.TicketService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/tickets")
@RequiredArgsConstructor
public class TicketController {

    private final TicketService ticketService;

    /* =============================================================
       üîπ CUSTOMER: G·ª≠i y√™u c·∫ßu h·ªßy v√©
    ============================================================= */
    @PutMapping("/{ticketId}/cancel-request")
    @PreAuthorize("hasRole('Customer')")
    public ResponseEntity<ApiResponse<TicketResponse>> requestCancel(
            @PathVariable Integer ticketId,
            @AuthenticationPrincipal Account account) {

        return ResponseEntity.ok(ApiResponse.<TicketResponse>builder()
                .code(1000)
                .message("ƒê√£ g·ª≠i y√™u c·∫ßu h·ªßy v√©")
                .result(ticketService.requestCancel(ticketId, account))
                .build());
    }

    /* =============================================================
       üîπ STAFF: Duy·ªát h·ªßy v√©
    ============================================================= */
    // ‚úÖ Staff duy·ªát h·ªßy v√©
    @PutMapping("/{ticketId}/approve-cancel")
    @PreAuthorize("hasAnyRole('Staff','Manager','Admin')")
    public ResponseEntity<ApiResponse<TicketResponse>> approveCancel(
            @PathVariable Integer ticketId,
            @RequestParam Integer accountId) {

        Account staff = new Account();
        staff.setAccountID(accountId); // üëà set th·ªß c√¥ng t·ª´ request

        return ResponseEntity.ok(ApiResponse.<TicketResponse>builder()
                .code(1000)
                .message("ƒê√£ duy·ªát h·ªßy v√©")
                .result(ticketService.approveCancel(ticketId, staff))
                .build());
    }

    /* =============================================================
       üîπ STAFF: Duy·ªát ho√†n ti·ªÅn
    ============================================================= */
    // ‚úÖ Staff duy·ªát ho√†n ti·ªÅn
    @PutMapping("/{ticketId}/approve-refund")
    @PreAuthorize("hasAnyRole('Staff','Manager','Admin')")
    public ResponseEntity<ApiResponse<TicketResponse>> approveRefund(
            @PathVariable Integer ticketId,
            @RequestParam Integer accountId) {

        Account staff = new Account();
        staff.setAccountID(accountId);

        return ResponseEntity.ok(ApiResponse.<TicketResponse>builder()
                .code(1000)
                .message("ƒê√£ ho√†n ti·ªÅn v√©")
                .result(ticketService.approveRefund(ticketId, staff))
                .build());
    }

    /* =============================================================
       üîπ STAFF: Danh s√°ch v√© ch·ªù h·ªßy
    ============================================================= */
    @GetMapping("/branch/{branchId}/pending-cancel")
    @PreAuthorize("hasRole('Staff')")
    public ResponseEntity<ApiResponse<List<TicketResponse>>> getPendingCancelTickets(@PathVariable Integer branchId) {
        return ResponseEntity.ok(ApiResponse.<List<TicketResponse>>builder()
                .code(1000)
                .message("Danh s√°ch v√© ch·ªù h·ªßy")
                .result(ticketService.getPendingCancelTickets(branchId))
                .build());
    }

    /* =============================================================
       üîπ CUSTOMER: Danh s√°ch v√© theo t√†i kho·∫£n
    ============================================================= */
    @GetMapping("/account/{accountID}")
    @PreAuthorize("hasRole('Customer')")
    public ResponseEntity<List<TicketResponse>> getTicketsByAccount(@PathVariable Integer accountID) {
        return ResponseEntity.ok(ticketService.getTicketsByAccount(accountID));
    }

    /* =============================================================
       üîπ STAFF: V√© theo chi nh√°nh
    ============================================================= */
    @GetMapping("/branch/{branchId}")
    @PreAuthorize("hasRole('Staff')")
    public ResponseEntity<ApiResponse<List<TicketResponse>>> getTicketsByBranch(@PathVariable Integer branchId) {
        return ResponseEntity.ok(ApiResponse.<List<TicketResponse>>builder()
                .code(1000)
                .message("Danh s√°ch v√© theo chi nh√°nh")
                .result(ticketService.getTicketsByBranch(branchId))
                .build());
    }

    /* =============================================================
       üîπ STAFF: C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªß c√¥ng (n·∫øu c·∫ßn)
    ============================================================= */
    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªß c√¥ng
    @PutMapping("/update-status/{ticketId}")
    @PreAuthorize("hasAnyRole('Staff','Manager','Admin')")
    public ResponseEntity<ApiResponse<TicketResponse>> updateTicketStatus(
            @PathVariable Integer ticketId,
            @RequestParam String status,
            @RequestParam Integer accountId) {

        Account staff = new Account();
        staff.setAccountID(accountId);

        return ResponseEntity.ok(ApiResponse.<TicketResponse>builder()
                .code(1000)
                .message("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng")
                .result(ticketService.updateTicketStatus(ticketId, status, staff))
                .build());
    }

    /* =============================================================
       üîπ Chi ti·∫øt v√©
    ============================================================= */
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<TicketDetailResponse>> getById(@PathVariable Integer id) {
        return ResponseEntity.ok(ApiResponse.<TicketDetailResponse>builder()
                .code(1000)
                .message("Success")
                .result(ticketService.getById(id))
                .build());
    }
}
