package com.example.cinemaster.controller;

import com.example.cinemaster.dto.request.AccountRequest;
import com.example.cinemaster.dto.response.AccountResponse;
import com.example.cinemaster.dto.response.PagedResponse;
import com.example.cinemaster.security.AccountPrincipal;
import com.example.cinemaster.service.AccountManageService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/v1/accounts")
@RequiredArgsConstructor
public class AccountManageController {

    private final AccountManageService accountService;

    /* ========================= CREATE ========================= */
    @PreAuthorize("hasAnyRole('Admin','Manager')")
    @PostMapping(consumes = {"multipart/form-data"})
    public ResponseEntity<AccountResponse> create(
            @RequestPart("data") AccountRequest request,
            @RequestPart(value = "avatarFile", required = false) MultipartFile avatarFile,
            Authentication auth) {

        AccountPrincipal user = (AccountPrincipal) auth.getPrincipal();

        // üîí Manager ch·ªâ ƒë∆∞·ª£c t·∫°o nh√¢n vi√™n trong chi nh√°nh c·ªßa h·ªç
        if (user.hasRole("Manager")) {
            if (!request.getBranchId().equals(user.getBranchId())) {
                throw new SecurityException("B·∫°n ch·ªâ c√≥ th·ªÉ t·∫°o t√†i kho·∫£n cho chi nh√°nh c·ªßa m√¨nh!");
            }
            // ‚úÖ N·∫øu mu·ªën ƒë·∫£m b·∫£o an to√†n tuy·ªát ƒë·ªëi, ghi ƒë√® branchId
            request.setBranchId(user.getBranchId());
        }

        return ResponseEntity.ok(accountService.create(request, avatarFile));
    }

    /* ========================= UPDATE ========================= */
    @PreAuthorize("hasAnyRole('Admin','Manager')")
    @PutMapping(value = "/{id}", consumes = {"multipart/form-data"})
    public ResponseEntity<AccountResponse> update(
            @PathVariable Integer id,
            @RequestPart("data") AccountRequest request,
            @RequestPart(value = "avatarFile", required = false) MultipartFile avatarFile,
            Authentication auth) {

        AccountPrincipal user = (AccountPrincipal) auth.getPrincipal();
        AccountResponse existing = accountService.getById(id);

        // üîí Manager ch·ªâ ƒë∆∞·ª£c s·ª≠a t√†i kho·∫£n trong chi nh√°nh c·ªßa m√¨nh
        if (user.hasRole("Manager") && !existing.getBranchId().equals(user.getBranchId())) {
            throw new SecurityException("B·∫°n kh√¥ng th·ªÉ ch·ªânh s·ª≠a nh√¢n vi√™n c·ªßa chi nh√°nh kh√°c!");
        }

        // Ghi ƒë√® branchId ƒë·ªÉ tr√°nh fake request
        if (user.hasRole("Manager")) {
            request.setBranchId(user.getBranchId());
        }

        return ResponseEntity.ok(accountService.update(id, request, avatarFile));
    }

    /* ========================= GET ALL ========================= */
    @PreAuthorize("hasAnyRole('Admin','Manager','Staff')")
    @GetMapping
    public ResponseEntity<PagedResponse<AccountResponse>> getAll(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) Integer roleId,
            @RequestParam(required = false) Integer branchId,
            @RequestParam(required = false) String keyword,
            Authentication auth
    ) {
        AccountPrincipal user = (AccountPrincipal) auth.getPrincipal();

        // üîí Manager ch·ªâ xem nh√¢n vi√™n thu·ªôc chi nh√°nh m√¨nh
        if (user.hasRole("Manager")) {
            branchId = user.getBranchId();
        }

        return ResponseEntity.ok(accountService.getAllPaged(page, size, roleId, branchId, keyword));
    }

    /* ========================= GET BY ID ========================= */
    @PreAuthorize("hasAnyRole('Admin','Manager','Staff')")
    @GetMapping("/{id}")
    public ResponseEntity<AccountResponse> getById(@PathVariable Integer id, Authentication auth) {
        AccountResponse account = accountService.getById(id);
        AccountPrincipal user = (AccountPrincipal) auth.getPrincipal();

        // üîí Manager kh√¥ng ƒë∆∞·ª£c xem t√†i kho·∫£n chi nh√°nh kh√°c
        if (user.hasRole("Manager") && !account.getBranchId().equals(user.getBranchId())) {
            throw new SecurityException("B·∫°n kh√¥ng th·ªÉ xem t√†i kho·∫£n c·ªßa chi nh√°nh kh√°c!");
        }

        return ResponseEntity.ok(account);
    }

    /* ========================= DELETE ========================= */
    @PreAuthorize("hasAnyRole('Admin','Manager')")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> softDelete(@PathVariable Integer id, Authentication auth) {
        AccountResponse account = accountService.getById(id);
        AccountPrincipal user = (AccountPrincipal) auth.getPrincipal();

        if (user.hasRole("Manager") && !account.getBranchId().equals(user.getBranchId())) {
            throw new SecurityException("B·∫°n kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n c·ªßa chi nh√°nh kh√°c!");
        }

        accountService.softDelete(id);
        return ResponseEntity.noContent().build();
    }

    /* ========================= RESTORE ========================= */
    @PreAuthorize("hasAnyRole('Admin','Manager')")
    @PutMapping("/{id}/restore")
    public ResponseEntity<Void> restore(@PathVariable Integer id, Authentication auth) {
        AccountResponse account = accountService.getById(id);
        AccountPrincipal user = (AccountPrincipal) auth.getPrincipal();

        if (user.hasRole("Manager") && !account.getBranchId().equals(user.getBranchId())) {
            throw new SecurityException("B·∫°n kh√¥ng th·ªÉ kh√¥i ph·ª•c t√†i kho·∫£n c·ªßa chi nh√°nh kh√°c!");
        }

        accountService.restore(id);
        return ResponseEntity.ok().build();
    }
}
