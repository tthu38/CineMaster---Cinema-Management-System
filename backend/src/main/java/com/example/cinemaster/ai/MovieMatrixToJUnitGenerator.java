package com.example.cinemaster.ai;

import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;

public class MovieMatrixToJUnitGenerator {

    public static void main(String[] args) throws IOException {
        generateTestsFromMatrix(
                "D:\\CineMaster\\backend\\src\\test\\java\\com\\example\\cinemaster\\generated\\MovieService_TestMatrix.md"
        );
    }

    public static void generateTestsFromMatrix(String matrixPath) throws IOException {
        String content = Files.readString(Paths.get(matrixPath));

        // Regex bắt tên function (VD: create(MovieRequest request) Function)
        Pattern functionPattern = Pattern.compile("(?m)^([a-zA-Z]+\\([^)]*\\)) Function");
        Matcher matcher = functionPattern.matcher(content);

        Map<String, String> functionSections = new LinkedHashMap<>();
        List<Integer> positions = new ArrayList<>();
        List<String> functions = new ArrayList<>();

        while (matcher.find()) {
            functions.add(matcher.group(1));
            positions.add(matcher.start());
        }
        positions.add(content.length());

        // Tách từng đoạn markdown của mỗi function
        for (int i = 0; i < functions.size(); i++) {
            String func = functions.get(i);
            int start = positions.get(i);
            int end = positions.get(i + 1);
            String section = content.substring(start, end).trim();
            functionSections.put(func, section);
        }

        int totalTests = 0;

        // Sinh code JUnit
        StringBuilder testCode = new StringBuilder();
        testCode.append("package com.example.cinemaster.generated;\n\n")
                .append("import org.junit.jupiter.api.*;\n")
                .append("import static org.junit.jupiter.api.Assertions.*;\n\n")
                .append("/**\n")
                .append(" * ⚙️ Auto-generated test skeleton from MovieService_TestMatrix.md\n")
                .append(" * Generated by MovieMatrixToJUnitGenerator\n")
                .append(" */\n")
                .append("class MovieService_AutoTest {\n\n")
                .append("    private MovieService movieService;\n\n")
                .append("    @BeforeEach\n")
                .append("    void setup() {\n")
                .append("        movieService = new MovieService(null, null);\n")
                .append("    }\n\n");

        //  Duyệt từng function
        for (var entry : functionSections.entrySet()) {
            String functionName = entry.getKey();
            String section = entry.getValue();

            String className = functionName.replaceAll("[^a-zA-Z]", "") + "Tests";

            testCode.append("    @Nested\n")
                    .append("    class ").append(className).append(" {\n");

            // Regex bắt từng dòng trong bảng
            Pattern rowPattern = Pattern.compile(
                    "\\|\\s*(Happy Path|Edge Case|Error Scenario|Integration)\\s*\\|\\s*(.*?)\\s*\\|\\s*(.*?)\\s*\\|\\s*(.*?)\\s*\\|"
            );
            Matcher rowMatcher = rowPattern.matcher(section);

            while (rowMatcher.find()) {
                totalTests++;

                String category = rowMatcher.group(1).trim();
                String testCase = rowMatcher.group(2).trim();
                String input = rowMatcher.group(3).trim();
                String expected = rowMatcher.group(4).trim();

                String methodName = "test_" + testCase.replaceAll("[^a-zA-Z0-9]", "_");

                testCode.append("\n        @Test\n")
                        .append("        @DisplayName(\"[").append(category).append("] ").append(testCase).append("\")\n")
                        .append("        void ").append(methodName).append("() {\n")
                        .append("            System.out.println(\"▶ Running: ").append(functionName).append(" → ").append(testCase).append("\");\n")
                        .append("            // Input: ").append(input).append("\n")
                        .append("            // Expected: ").append(expected).append("\n")
                        .append("            // TODO: Implement test logic here\n")
                        .append("            assertTrue(true);\n")
                        .append("        }\n");
            }

            testCode.append("    }\n\n");
        }

        //  Tổng kết số test
        testCode.append("    @AfterAll\n")
                .append("    static void summary() {\n")
                .append("        System.out.println(\"\\nTotal auto-generated test cases: ").append(totalTests).append("\");\n")
                .append("    }\n");

        testCode.append("}\n");

        // Ghi file ra ổ đĩa
        Path outputPath = Paths.get(
                "D:\\CineMaster\\backend\\src\\test\\java\\com\\example\\cinemaster\\generated\\MovieService_AutoTest.java"
        );
        Files.createDirectories(outputPath.getParent());
        Files.writeString(outputPath, testCode.toString(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

        System.out.println("Successfully generated test code!");
        System.out.println("Output file: " + outputPath.toAbsolutePath());
        System.out.println("Total tests parsed: " + totalTests);
    }
}
